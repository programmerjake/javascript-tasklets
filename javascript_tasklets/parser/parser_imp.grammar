code license {
/*
 * Copyright (C) 2012-2016 Jacob R. Lifshay
 * This file is part of Voxels.
 *
 * Voxels is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Voxels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Voxels; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */

// to regenerate this file, use https://github.com/programmerjake/peg_parser_generator
// command: peg_parser_generator parser_imp.grammar
}

namespace javascript_tasklets::parser;

code header {
#include "../string.h"
}

code source {
#include "../character_properties.h"
}

typedef unsigned unsigned;
typedef bool bool;
typedef javascript_tasklets::String String;

TokenizerHexDigitValue:unsigned = 
    [^]:ch
    &{
        auto digitValue = character_properties::javascriptDigitValue(ch);
        if(digitValue >= 0 && digitValue < 0x10)
            $$ = ch;
        else
            $? = "missing hex digit";
    };

TokenizerLineTerminatorSequence:char = "\r\n" {$$ = U'\n';}
                                     / [^]:char1
                                     &{
                                         $$ = char1;
                                         if(!character_properties::javascriptLineTerminator($$))
                                             $? = "expected a line terminator";
                                     };

TokenizerComment = TokenizerMultiLineComment
                 / TokenizerSingleLineComment;

TokenizerMultiLineComment = "/*" (!"*/" [^])* "*/";

TokenizerMultiLineCommentNoLineTerminator = "/*" (!"*/" !TokenizerLineTerminatorSequence [^])* "*/";

TokenizerSingleLineComment = "//" (!TokenizerLineTerminatorSequence [^])*;

TokenizerUnicodeEscapeSequence:char = "\\u" {$$ = 0;} (
    "{"
    (
        TokenizerHexDigitValue:digitValue
        &{
            $$ = $$ * 0x10 + digitValue;
            if($$ > 0x10FFFF)
                $? = "unicode escape value is too big";
        }
    )+
    "}"
    / TokenizerHexDigitValue:digit1
      TokenizerHexDigitValue:digit2
      TokenizerHexDigitValue:digit3
      TokenizerHexDigitValue:digit4
      {$$ = digit1 * 0x1000 + digit2 * 0x100 + digit3 * 0x10 + digit4;}
    );

TokenizerUnicodeEscapeOrChar:char = TokenizerUnicodeEscapeSequence:escape {$$ = escape;}
                                  / [^]:ch {$$ = ch;};

TokenizerIdentifierName:String =
    TokenizerUnicodeEscapeOrChar:startChar
    &{
        if(!character_properties::javascriptIdStart(startChar))
            $? = "expected identifier start";
        else
            $$ = startChar;
    }
    (
        TokenizerUnicodeEscapeOrChar:continueChar
        &{
            if(!character_properties::javascriptIdContinue(continueChar))
                $? = "expected identifier continue";
            else
                $$ = continueChar;
        }
    )*
    !"\\";

TokenizerEscapelessIdentifierName:String =
    [^]:startChar
    &{
        if(!character_properties::javascriptIdStart(startChar))
            $? = "expected identifier start";
        else
            $$ = startChar;
    }
    (
        [^]:continueChar
        &{
            if(!character_properties::javascriptIdContinue(continueChar))
                $? = "expected identifier continue";
            else
                $$ = continueChar;
        }
    )*
    !"\\";

TokenizerReservedWord = TokenizerKeyword / TokenizerFutureReservedWord / TokenizerNullLiteral / TokenizerBooleanLiteral;

TokenizerAwait = "await" !TokenizerUnicodeEscapeOrChar;
TokenizerBreak = "break" !TokenizerUnicodeEscapeOrChar;
TokenizerCase = "case" !TokenizerUnicodeEscapeOrChar;
TokenizerCatch = "catch" !TokenizerUnicodeEscapeOrChar;
TokenizerClass = "class" !TokenizerUnicodeEscapeOrChar;
TokenizerConst = "const" !TokenizerUnicodeEscapeOrChar;
TokenizerContinue = "continue" !TokenizerUnicodeEscapeOrChar;
TokenizerDebugger = "debugger" !TokenizerUnicodeEscapeOrChar;
TokenizerDefault = "default" !TokenizerUnicodeEscapeOrChar;
TokenizerDelete = "delete" !TokenizerUnicodeEscapeOrChar;
TokenizerDo = "do" !TokenizerUnicodeEscapeOrChar;
TokenizerElse = "else" !TokenizerUnicodeEscapeOrChar;
TokenizerEnum = "enum" !TokenizerUnicodeEscapeOrChar;
TokenizerExport = "export" !TokenizerUnicodeEscapeOrChar;
TokenizerExtends = "extends" !TokenizerUnicodeEscapeOrChar;
TokenizerFalse = "false" !TokenizerUnicodeEscapeOrChar;
TokenizerFinally = "finally" !TokenizerUnicodeEscapeOrChar;
TokenizerFor = "for" !TokenizerUnicodeEscapeOrChar;
TokenizerFunction = "function" !TokenizerUnicodeEscapeOrChar;
TokenizerIf = "if" !TokenizerUnicodeEscapeOrChar;
TokenizerImplements = "implements" !TokenizerUnicodeEscapeOrChar;
TokenizerImport = "import" !TokenizerUnicodeEscapeOrChar;
TokenizerIn = "in" !TokenizerUnicodeEscapeOrChar;
TokenizerInstanceOf = "instanceof" !TokenizerUnicodeEscapeOrChar;
TokenizerInterface = "interface" !TokenizerUnicodeEscapeOrChar;
TokenizerNew = "new" !TokenizerUnicodeEscapeOrChar;
TokenizerNull = "null" !TokenizerUnicodeEscapeOrChar;
TokenizerPackage = "package" !TokenizerUnicodeEscapeOrChar;
TokenizerPrivate = "private" !TokenizerUnicodeEscapeOrChar;
TokenizerProtected = "protected" !TokenizerUnicodeEscapeOrChar;
TokenizerPublic = "public" !TokenizerUnicodeEscapeOrChar;
TokenizerReturn = "return" !TokenizerUnicodeEscapeOrChar;
TokenizerSuper = "super" !TokenizerUnicodeEscapeOrChar;
TokenizerSwitch = "switch" !TokenizerUnicodeEscapeOrChar;
TokenizerThis = "this" !TokenizerUnicodeEscapeOrChar;
TokenizerThrow = "throw" !TokenizerUnicodeEscapeOrChar;
TokenizerTrue = "true" !TokenizerUnicodeEscapeOrChar;
TokenizerTry = "try" !TokenizerUnicodeEscapeOrChar;
TokenizerTypeOf = "typeof" !TokenizerUnicodeEscapeOrChar;
TokenizerVar = "var" !TokenizerUnicodeEscapeOrChar;
TokenizerVoid = "void" !TokenizerUnicodeEscapeOrChar;
TokenizerWhile = "while" !TokenizerUnicodeEscapeOrChar;
TokenizerWith = "with" !TokenizerUnicodeEscapeOrChar;
TokenizerYield = "yield" !TokenizerUnicodeEscapeOrChar;

TokenizerKeyword = TokenizerBreak
                 / TokenizerCase
                 / TokenizerCatch
                 / TokenizerClass
                 / TokenizerConst
                 / TokenizerContinue
                 / TokenizerDebugger
                 / TokenizerDefault
                 / TokenizerDelete
                 / TokenizerDo
                 / TokenizerElse
                 / TokenizerExport
                 / TokenizerExtends
                 / TokenizerFinally
                 / TokenizerFor
                 / TokenizerFunction
                 / TokenizerIf
                 / TokenizerImport
                 / TokenizerIn
                 / TokenizerInstanceOf
                 / TokenizerNew
                 / TokenizerReturn
                 / TokenizerSuper
                 / TokenizerSwitch
                 / TokenizerThis
                 / TokenizerThrow
                 / TokenizerTry
                 / TokenizerTypeOf
                 / TokenizerVar
                 / TokenizerVoid
                 / TokenizerWhile
                 / TokenizerWith
                 / TokenizerYield;

TokenizerFutureReservedWord = TokenizerAwait
                            / TokenizerEnum;

TokenizerNullLiteral = TokenizerNull;

TokenizerBooleanLiteral:bool = TokenizerTrue {$$ = true;} / TokenizerFalse {$$ = false;};
