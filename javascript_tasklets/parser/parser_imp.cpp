// automatically generated from parser_imp.grammar
#line 1 "parser_imp.grammar"
              
/*
 * Copyright (C) 2012-2016 Jacob R. Lifshay
 * This file is part of Voxels.
 *
 * Voxels is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Voxels is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Voxels; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 *
 */

#line 26 "parser_imp.cpp"
#include "parser_imp.h"

namespace parser
{

Parser::Parser(std::shared_ptr<const char32_t> source, std::size_t sourceSize)
    : resultsPointers(sourceSize, nullptr),
      resultsChunks(),
      eofResults(),
      source(std::move(source)),
      sourceSize(sourceSize)
{
}

Parser::Parser(std::u32string source) : Parser(makeSource(std::move(source)))
{
}

Parser::Parser(const char *source, std::size_t sourceSize) : Parser(makeSource(source, sourceSize))
{
}

Parser::Parser(const char32_t *source, std::size_t sourceSize)
    : Parser(makeSource(std::u32string(source, sourceSize)))
{
}

std::pair<std::shared_ptr<const char32_t>, std::size_t> Parser::makeSource(std::u32string source)
{
    auto sourceSize = source.size();
    auto pSource = std::make_shared<std::u32string>(std::move(source));
    return std::make_pair(std::shared_ptr<const char32_t>(pSource, pSource->data()), sourceSize);
}

std::pair<std::shared_ptr<const char32_t>, std::size_t> Parser::makeSource(const char *source,
                                                                           std::size_t sourceSize)
{
    std::u32string retval;
    retval.reserve(sourceSize);
    std::size_t position = 0;
    const char32_t replacementChar = U'\uFFFD';
    while(position < sourceSize)
    {
        unsigned long byte1 = source[position++];
        if(byte1 < 0x80)
        {
            retval += static_cast<char32_t>(byte1);
            continue;
        }
        if(position >= sourceSize || byte1 < 0xC0 || (source[position] & 0xC0) != 0x80)
        {
            retval += replacementChar;
            continue;
        }
        bool invalid = byte1 < 0xC2 || byte1 > 0xF4;
        unsigned long byte2 = source[position++];
        if(byte1 < 0xE0)
        {
            if(invalid)
                retval += replacementChar;
            else
                retval += static_cast<char32_t>(((byte1 & 0x1F) << 6) | (byte2 & 0x3F));
            continue;
        }
        if(position >= sourceSize || (source[position] & 0xC0) != 0x80)
        {
            retval += replacementChar;
            continue;
        }
        unsigned long byte3 = source[position++];
        if(byte1 < 0xF0)
        {
            if(byte1 == 0xE0 && byte2 < 0xA0)
                invalid = true;
            if(invalid)
                retval += replacementChar;
            else
                retval += static_cast<char32_t>(((byte1 & 0xF) << 12) | ((byte2 & 0x3F) << 6)
                                                | (byte3 & 0x3F));
            continue;
        }
        if(position >= sourceSize || (source[position] & 0xC0) != 0x80)
        {
            retval += replacementChar;
            continue;
        }
        unsigned long byte4 = source[position++];
        if(byte1 == 0xF0 && byte2 < 0x90)
            invalid = true;
        if(byte1 == 0xF4 && byte2 > 0x8F)
            invalid = true;
        if(byte1 > 0xF4)
            invalid = true;
        if(invalid)
            retval += replacementChar;
        else
            retval += static_cast<char32_t>(((byte1 & 0x7) << 18) | ((byte2 & 0x3F) << 12)
                                            | ((byte3 & 0x3F) << 6) | (byte4 & 0x3F));
    }
    return makeSource(std::move(retval));
}

char32_t Parser::parseUnicodeCategoryLu()
{
    auto result = internalParseUnicodeCategoryLu(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryLu(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryLu(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLu;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'Z')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00C0' && this->source.get()[startLocation__] <= U'\u00D6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00D8' && this->source.get()[startLocation__] <= U'\u00DE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0100')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0102')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0104')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0106')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0108')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010C')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0110')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0112')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0114')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0116')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0118')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0120')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0122')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0124')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0126')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0128')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0130')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0132')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0136')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0139')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0141')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0143')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0145')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0147')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0150')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0152')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0154')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0156')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0158')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u015C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0160')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0162')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0164')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0166')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0168')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0170')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0172')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0174')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0176')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0178' && this->source.get()[startLocation__] <= U'\u0179')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u017D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0181' && this->source.get()[startLocation__] <= U'\u0182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0184')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0186' && this->source.get()[startLocation__] <= U'\u0187')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0189' && this->source.get()[startLocation__] <= U'\u018B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u018E' && this->source.get()[startLocation__] <= U'\u0191')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0193' && this->source.get()[startLocation__] <= U'\u0194')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0196' && this->source.get()[startLocation__] <= U'\u0198')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u019C' && this->source.get()[startLocation__] <= U'\u019D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u019F' && this->source.get()[startLocation__] <= U'\u01A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01A6' && this->source.get()[startLocation__] <= U'\u01A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01AE' && this->source.get()[startLocation__] <= U'\u01AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B1' && this->source.get()[startLocation__] <= U'\u01B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B7' && this->source.get()[startLocation__] <= U'\u01B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01BC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01F6' && this->source.get()[startLocation__] <= U'\u01F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0200')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0202')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0204')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0206')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0208')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u020E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0210')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0212')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0214')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0216')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0218')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0220')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0222')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0224')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0226')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0228')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0230')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0232')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023A' && this->source.get()[startLocation__] <= U'\u023B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023D' && this->source.get()[startLocation__] <= U'\u023E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0241')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0243' && this->source.get()[startLocation__] <= U'\u0246')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0248')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0370')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0372')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0376')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u037F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0386')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0388' && this->source.get()[startLocation__] <= U'\u038A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u038C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u038E' && this->source.get()[startLocation__] <= U'\u038F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0391' && this->source.get()[startLocation__] <= U'\u03A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03A3' && this->source.get()[startLocation__] <= U'\u03AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03D2' && this->source.get()[startLocation__] <= U'\u03D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03D8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u03DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03F9' && this->source.get()[startLocation__] <= U'\u03FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03FD' && this->source.get()[startLocation__] <= U'\u042F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0460')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0462')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0464')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0466')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0468')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0470')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0472')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0474')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0476')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0478')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0480')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u048E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0490')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0492')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0494')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0496')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0498')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u04C0' && this->source.get()[startLocation__] <= U'\u04C1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04D2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F2')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0500')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0502')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0504')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0506')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0508')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0510')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0512')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0514')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0516')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0518')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0520')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0522')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0524')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0526')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0528')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0531' && this->source.get()[startLocation__] <= U'\u0556')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10A0' && this->source.get()[startLocation__] <= U'\u10C5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u10C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u10CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u13A0' && this->source.get()[startLocation__] <= U'\u13F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E02')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E04')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E08')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E12')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E14')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E18')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E1A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E20')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E22')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E24')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E26')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E32')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E38')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E46')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E50')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E52')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E58')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E62')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E66')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E68')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E76')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E78')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E80')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E86')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E94')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1ECC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F08' && this->source.get()[startLocation__] <= U'\u1F0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F18' && this->source.get()[startLocation__] <= U'\u1F1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F28' && this->source.get()[startLocation__] <= U'\u1F2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F38' && this->source.get()[startLocation__] <= U'\u1F3F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1F48' && this->source.get()[startLocation__] <= U'\u1F4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F68' && this->source.get()[startLocation__] <= U'\u1F6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB8' && this->source.get()[startLocation__] <= U'\u1FBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC8' && this->source.get()[startLocation__] <= U'\u1FCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FD8' && this->source.get()[startLocation__] <= U'\u1FDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FE8' && this->source.get()[startLocation__] <= U'\u1FEC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1FF8' && this->source.get()[startLocation__] <= U'\u1FFB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2102')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2107')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u210B' && this->source.get()[startLocation__] <= U'\u210D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2110' && this->source.get()[startLocation__] <= U'\u2112')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2115')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2119' && this->source.get()[startLocation__] <= U'\u211D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2124')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2126')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2128')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u212A' && this->source.get()[startLocation__] <= U'\u212D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2130' && this->source.get()[startLocation__] <= U'\u2133')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u213E' && this->source.get()[startLocation__] <= U'\u213F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2145')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2183')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C00' && this->source.get()[startLocation__] <= U'\u2C2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C62' && this->source.get()[startLocation__] <= U'\u2C64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C6D' && this->source.get()[startLocation__] <= U'\u2C70')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C7E' && this->source.get()[startLocation__] <= U'\u2C80')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C86')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C94')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C98')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C9C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA640')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA642')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA644')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA646')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA648')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA650')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA652')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA654')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA656')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA658')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA660')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA662')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA664')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA666')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA668')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA680')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA682')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA684')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA686')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA688')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA68C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA690')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA692')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA694')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA696')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA698')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA69A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA722')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA724')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA726')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA728')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA732')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA734')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA736')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA738')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA740')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA742')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA744')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA746')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA748')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA750')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA752')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA754')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA756')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA758')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA760')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA762')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA764')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA766')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA768')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA779')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA77D' && this->source.get()[startLocation__] <= U'\uA77E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA780')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA782')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA784')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA786')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA790')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA792')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA796')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA798')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA7AA' && this->source.get()[startLocation__] <= U'\uA7AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7B0' && this->source.get()[startLocation__] <= U'\uA7B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF21' && this->source.get()[startLocation__] <= U'\uFF3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010400' && this->source.get()[startLocation__] <= U'\U00010427')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010C80' && this->source.get()[startLocation__] <= U'\U00010CB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118A0' && this->source.get()[startLocation__] <= U'\U000118BF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A\\U00010400-\\U00010427\\U00010C80-\\U00010CB2\\U000118A0-\\U000118BF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D400' && this->source.get()[startLocation__] <= U'\U0001D419')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D434' && this->source.get()[startLocation__] <= U'\U0001D44D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D468' && this->source.get()[startLocation__] <= U'\U0001D481')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D49C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D49E' && this->source.get()[startLocation__] <= U'\U0001D49F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D4A2')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D400-\\U0001D419\\U0001D434-\\U0001D44D\\U0001D468-\\U0001D481\\U0001D49C\\U0001D49E-\\U0001D49F\\U0001D4A2]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D4A5' && this->source.get()[startLocation__] <= U'\U0001D4A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4A9' && this->source.get()[startLocation__] <= U'\U0001D4AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4AE' && this->source.get()[startLocation__] <= U'\U0001D4B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4D0' && this->source.get()[startLocation__] <= U'\U0001D4E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D504' && this->source.get()[startLocation__] <= U'\U0001D505')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D4A5-\\U0001D4A6\\U0001D4A9-\\U0001D4AC\\U0001D4AE-\\U0001D4B5\\U0001D4D0-\\U0001D4E9\\U0001D504-\\U0001D505]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D507' && this->source.get()[startLocation__] <= U'\U0001D50A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D50D' && this->source.get()[startLocation__] <= U'\U0001D514')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D516' && this->source.get()[startLocation__] <= U'\U0001D51C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D538' && this->source.get()[startLocation__] <= U'\U0001D539')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D53B' && this->source.get()[startLocation__] <= U'\U0001D53E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D507-\\U0001D50A\\U0001D50D-\\U0001D514\\U0001D516-\\U0001D51C\\U0001D538-\\U0001D539\\U0001D53B-\\U0001D53E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D540' && this->source.get()[startLocation__] <= U'\U0001D544')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D546')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D54A' && this->source.get()[startLocation__] <= U'\U0001D550')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D56C' && this->source.get()[startLocation__] <= U'\U0001D585')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5A0' && this->source.get()[startLocation__] <= U'\U0001D5B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5D4' && this->source.get()[startLocation__] <= U'\U0001D5ED')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D540-\\U0001D544\\U0001D546\\U0001D54A-\\U0001D550\\U0001D56C-\\U0001D585\\U0001D5A0-\\U0001D5B9\\U0001D5D4-\\U0001D5ED]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D608' && this->source.get()[startLocation__] <= U'\U0001D621')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D63C' && this->source.get()[startLocation__] <= U'\U0001D655')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D670' && this->source.get()[startLocation__] <= U'\U0001D689')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6A8' && this->source.get()[startLocation__] <= U'\U0001D6C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6E2' && this->source.get()[startLocation__] <= U'\U0001D6FA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D608-\\U0001D621\\U0001D63C-\\U0001D655\\U0001D670-\\U0001D689\\U0001D6A8-\\U0001D6C0\\U0001D6E2-\\U0001D6FA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D71C' && this->source.get()[startLocation__] <= U'\U0001D734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D756' && this->source.get()[startLocation__] <= U'\U0001D76E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D790' && this->source.get()[startLocation__] <= U'\U0001D7A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D7CA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D71C-\\U0001D734\\U0001D756-\\U0001D76E\\U0001D790-\\U0001D7A8\\U0001D7CA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryLu(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLu;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char8{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char9{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char10{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char11{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char12{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char13{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char14{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char15{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char16{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char17{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char18{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char19{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char20{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char21{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char22{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char23{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char24{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char25{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char26{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char27{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char28{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char29{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char30{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char31{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char32{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char33{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char34{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char35{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char36{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char37{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char38{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char39{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char40{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char41{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char42{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char43{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char44{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'Z')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00C0' && this->source.get()[startLocation__] <= U'\u00D6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00D8' && this->source.get()[startLocation__] <= U'\u00DE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0100')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0102')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0104')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0106')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0108')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010C')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0110')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0112')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0114')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 26 "parser_imp.grammar"
                                                                                                                                  returnValue__ = char0;
#line 4340 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0116')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0118')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0120')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0122')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0124')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0126')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0128')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0130')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0132')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0136')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 27 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char1;
#line 4440 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0139')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0141')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0143')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0145')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0147')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0150')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0152')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0154')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0156')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0158')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 28 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char2;
#line 4548 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u015C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0160')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0162')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0164')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0166')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0168')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0170')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0172')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0174')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0176')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0178' && this->source.get()[startLocation__] <= U'\u0179')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 29 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char3;
#line 4652 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u017D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0181' && this->source.get()[startLocation__] <= U'\u0182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0184')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0186' && this->source.get()[startLocation__] <= U'\u0187')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0189' && this->source.get()[startLocation__] <= U'\u018B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u018E' && this->source.get()[startLocation__] <= U'\u0191')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0193' && this->source.get()[startLocation__] <= U'\u0194')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0196' && this->source.get()[startLocation__] <= U'\u0198')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u019C' && this->source.get()[startLocation__] <= U'\u019D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 30 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char4;
#line 4728 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u019F' && this->source.get()[startLocation__] <= U'\u01A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01A6' && this->source.get()[startLocation__] <= U'\u01A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01AE' && this->source.get()[startLocation__] <= U'\u01AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B1' && this->source.get()[startLocation__] <= U'\u01B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B7' && this->source.get()[startLocation__] <= U'\u01B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01BC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 31 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char5;
#line 4812 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 32 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char6;
#line 4920 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01F6' && this->source.get()[startLocation__] <= U'\u01F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0200')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0202')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0204')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0206')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0208')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 33 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char7;
#line 5024 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u020E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0210')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0212')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0214')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0216')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0218')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0220')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0222')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0224')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0226')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0228')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char8 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 34 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char8;
#line 5132 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0230')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0232')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023A' && this->source.get()[startLocation__] <= U'\u023B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023D' && this->source.get()[startLocation__] <= U'\u023E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0241')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0243' && this->source.get()[startLocation__] <= U'\u0246')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0248')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0370')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0372')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0376')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u037F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char9 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 35 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char9;
#line 5228 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0386')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0388' && this->source.get()[startLocation__] <= U'\u038A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u038C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u038E' && this->source.get()[startLocation__] <= U'\u038F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0391' && this->source.get()[startLocation__] <= U'\u03A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03A3' && this->source.get()[startLocation__] <= U'\u03AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03D2' && this->source.get()[startLocation__] <= U'\u03D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03D8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char10 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 36 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char10;
#line 5312 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u03DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03F9' && this->source.get()[startLocation__] <= U'\u03FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03FD' && this->source.get()[startLocation__] <= U'\u042F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0460')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0462')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char11 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 37 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char11;
#line 5412 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0464')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0466')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0468')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0470')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0472')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0474')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0476')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0478')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0480')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char12 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 38 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char12;
#line 5520 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u048E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0490')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0492')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0494')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0496')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0498')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char13 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 39 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char13;
#line 5628 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u04C0' && this->source.get()[startLocation__] <= U'\u04C1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char14 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 40 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char14;
#line 5732 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04D2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F2')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char15 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 41 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char15;
#line 5840 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04F4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0500')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0502')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0504')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0506')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0508')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0510')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0512')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0514')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char16 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 42 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char16;
#line 5948 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0516')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0518')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0520')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0522')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0524')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0526')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0528')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0531' && this->source.get()[startLocation__] <= U'\u0556')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10A0' && this->source.get()[startLocation__] <= U'\u10C5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char17 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 43 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char17;
#line 6048 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u10C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u10CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u13A0' && this->source.get()[startLocation__] <= U'\u13F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E02')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E04')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E08')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E12')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E14')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E18')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char18 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 44 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char18;
#line 6152 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E1A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E20')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E22')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E24')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E26')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E32')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E38')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char19 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 45 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char19;
#line 6260 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E46')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E50')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E52')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E58')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char20 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 46 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char20;
#line 6368 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E62')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E66')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E68')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E76')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E78')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char21 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 47 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char21;
#line 6476 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E80')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E86')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E94')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char22 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 48 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char22;
#line 6584 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char23 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 49 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char23;
#line 6692 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1ECC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char24 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 50 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char24;
#line 6800 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F08' && this->source.get()[startLocation__] <= U'\u1F0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F18' && this->source.get()[startLocation__] <= U'\u1F1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F28' && this->source.get()[startLocation__] <= U'\u1F2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F38' && this->source.get()[startLocation__] <= U'\u1F3F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char25 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 51 "parser_imp.grammar"
                                                                                                                                              returnValue__ = char25;
#line 6892 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1F48' && this->source.get()[startLocation__] <= U'\u1F4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1F5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F68' && this->source.get()[startLocation__] <= U'\u1F6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB8' && this->source.get()[startLocation__] <= U'\u1FBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC8' && this->source.get()[startLocation__] <= U'\u1FCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FD8' && this->source.get()[startLocation__] <= U'\u1FDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FE8' && this->source.get()[startLocation__] <= U'\u1FEC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char26 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 52 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char26;
#line 6972 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1FF8' && this->source.get()[startLocation__] <= U'\u1FFB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2102')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2107')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u210B' && this->source.get()[startLocation__] <= U'\u210D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2110' && this->source.get()[startLocation__] <= U'\u2112')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2115')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2119' && this->source.get()[startLocation__] <= U'\u211D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2124')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2126')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2128')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u212A' && this->source.get()[startLocation__] <= U'\u212D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char27 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 53 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char27;
#line 7056 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2130' && this->source.get()[startLocation__] <= U'\u2133')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u213E' && this->source.get()[startLocation__] <= U'\u213F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2145')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2183')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C00' && this->source.get()[startLocation__] <= U'\u2C2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C62' && this->source.get()[startLocation__] <= U'\u2C64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C6D' && this->source.get()[startLocation__] <= U'\u2C70')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char28 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 54 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char28;
#line 7140 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C7E' && this->source.get()[startLocation__] <= U'\u2C80')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C86')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C94')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C98')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char29 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 55 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char29;
#line 7244 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C9C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char30 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 56 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char30;
#line 7352 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char31 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 57 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char31;
#line 7460 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA640')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA642')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA644')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA646')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA648')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA650')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA652')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA654')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA656')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char32 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 58 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char32;
#line 7568 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA658')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA660')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA662')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA664')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA666')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA668')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA680')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA682')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA684')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA686')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA688')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char33 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 59 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char33;
#line 7676 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA68C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA690')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA692')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA694')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA696')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA698')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA69A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA722')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA724')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA726')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA728')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA732')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA734')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char34 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 60 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char34;
#line 7784 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA736')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA738')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA740')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA742')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA744')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA746')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA748')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA750')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA752')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA754')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA756')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char35 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 61 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char35;
#line 7892 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA758')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA760')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA762')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA764')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA766')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA768')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA779')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA77D' && this->source.get()[startLocation__] <= U'\uA77E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA780')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char36 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 62 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char36;
#line 7996 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA782')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA784')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA786')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA790')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA792')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA796')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA798')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char37 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 63 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char37;
#line 8104 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA7AA' && this->source.get()[startLocation__] <= U'\uA7AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7B0' && this->source.get()[startLocation__] <= U'\uA7B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF21' && this->source.get()[startLocation__] <= U'\uFF3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010400' && this->source.get()[startLocation__] <= U'\U00010427')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010C80' && this->source.get()[startLocation__] <= U'\U00010CB2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118A0' && this->source.get()[startLocation__] <= U'\U000118BF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char38 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A\\U00010400-\\U00010427\\U00010C80-\\U00010CB2\\U000118A0-\\U000118BF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 64 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char38;
#line 8172 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D400' && this->source.get()[startLocation__] <= U'\U0001D419')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D434' && this->source.get()[startLocation__] <= U'\U0001D44D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D468' && this->source.get()[startLocation__] <= U'\U0001D481')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D49C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D49E' && this->source.get()[startLocation__] <= U'\U0001D49F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D4A2')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char39 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D400-\\U0001D419\\U0001D434-\\U0001D44D\\U0001D468-\\U0001D481\\U0001D49C\\U0001D49E-\\U0001D49F\\U0001D4A2]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 65 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char39;
#line 8236 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D4A5' && this->source.get()[startLocation__] <= U'\U0001D4A6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4A9' && this->source.get()[startLocation__] <= U'\U0001D4AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4AE' && this->source.get()[startLocation__] <= U'\U0001D4B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4D0' && this->source.get()[startLocation__] <= U'\U0001D4E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D504' && this->source.get()[startLocation__] <= U'\U0001D505')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char40 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D4A5-\\U0001D4A6\\U0001D4A9-\\U0001D4AC\\U0001D4AE-\\U0001D4B5\\U0001D4D0-\\U0001D4E9\\U0001D504-\\U0001D505]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 66 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char40;
#line 8296 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D507' && this->source.get()[startLocation__] <= U'\U0001D50A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D50D' && this->source.get()[startLocation__] <= U'\U0001D514')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D516' && this->source.get()[startLocation__] <= U'\U0001D51C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D538' && this->source.get()[startLocation__] <= U'\U0001D539')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D53B' && this->source.get()[startLocation__] <= U'\U0001D53E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char41 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D507-\\U0001D50A\\U0001D50D-\\U0001D514\\U0001D516-\\U0001D51C\\U0001D538-\\U0001D539\\U0001D53B-\\U0001D53E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 67 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char41;
#line 8356 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D540' && this->source.get()[startLocation__] <= U'\U0001D544')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D546')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D54A' && this->source.get()[startLocation__] <= U'\U0001D550')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D56C' && this->source.get()[startLocation__] <= U'\U0001D585')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5A0' && this->source.get()[startLocation__] <= U'\U0001D5B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5D4' && this->source.get()[startLocation__] <= U'\U0001D5ED')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char42 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D540-\\U0001D544\\U0001D546\\U0001D54A-\\U0001D550\\U0001D56C-\\U0001D585\\U0001D5A0-\\U0001D5B9\\U0001D5D4-\\U0001D5ED]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 68 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char42;
#line 8420 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D608' && this->source.get()[startLocation__] <= U'\U0001D621')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D63C' && this->source.get()[startLocation__] <= U'\U0001D655')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D670' && this->source.get()[startLocation__] <= U'\U0001D689')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6A8' && this->source.get()[startLocation__] <= U'\U0001D6C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6E2' && this->source.get()[startLocation__] <= U'\U0001D6FA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char43 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D608-\\U0001D621\\U0001D63C-\\U0001D655\\U0001D670-\\U0001D689\\U0001D6A8-\\U0001D6C0\\U0001D6E2-\\U0001D6FA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 69 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char43;
#line 8480 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D71C' && this->source.get()[startLocation__] <= U'\U0001D734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D756' && this->source.get()[startLocation__] <= U'\U0001D76E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D790' && this->source.get()[startLocation__] <= U'\U0001D7A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D7CA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char44 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D71C-\\U0001D734\\U0001D756-\\U0001D76E\\U0001D790-\\U0001D7A8\\U0001D7CA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 70 "parser_imp.grammar"
                                                                                                             returnValue__ = char44;
#line 8536 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryLl()
{
    auto result = internalParseUnicodeCategoryLl(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryLl(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryLl(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLl;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'z')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00B5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00DF' && this->source.get()[startLocation__] <= U'\u00F6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00F8' && this->source.get()[startLocation__] <= U'\u00FF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0101')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0103')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0105')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0107')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0109')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010B')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010D')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0111')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0113')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0115')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [a-z\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0117')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0119')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0121')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0123')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0125')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0127')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0129')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0131')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0133')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0135')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0137' && this->source.get()[startLocation__] <= U'\u0138')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u013A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0140')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0142')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0144')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0146')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0148' && this->source.get()[startLocation__] <= U'\u0149')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0151')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0153')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0155')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0157')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0159')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u015B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0161')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0163')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0165')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0167')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0169')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0171')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0173')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0175')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0177')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u017E' && this->source.get()[startLocation__] <= U'\u0180')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0183')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0185')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0188')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u018C' && this->source.get()[startLocation__] <= U'\u018D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0192')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0195')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0199' && this->source.get()[startLocation__] <= U'\u019B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u019E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01AA' && this->source.get()[startLocation__] <= U'\u01AB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B9' && this->source.get()[startLocation__] <= U'\u01BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01BD' && this->source.get()[startLocation__] <= U'\u01BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01DC' && this->source.get()[startLocation__] <= U'\u01DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01EF' && this->source.get()[startLocation__] <= U'\u01F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0201')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0203')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0205')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0207')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0209')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0211')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0213')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0215')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0217')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0219')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u021F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0221')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0223')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0225')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0227')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0229')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0231')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0233' && this->source.get()[startLocation__] <= U'\u0239')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u023C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023F' && this->source.get()[startLocation__] <= U'\u0240')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0242')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0247')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0249')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u024F' && this->source.get()[startLocation__] <= U'\u0293')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0295' && this->source.get()[startLocation__] <= U'\u02AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0371')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0373')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0377')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u037B' && this->source.get()[startLocation__] <= U'\u037D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0390')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03AC' && this->source.get()[startLocation__] <= U'\u03CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03D0' && this->source.get()[startLocation__] <= U'\u03D1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u03D5' && this->source.get()[startLocation__] <= U'\u03D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03EF' && this->source.get()[startLocation__] <= U'\u03F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u03FB' && this->source.get()[startLocation__] <= U'\u03FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0430' && this->source.get()[startLocation__] <= U'\u045F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0461')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0463')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0465')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0467')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0469')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0471')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0473')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0475')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0477')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0479')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u047B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0481')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0491')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0493')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0495')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0497')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0499')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04C8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u04CE' && this->source.get()[startLocation__] <= U'\u04CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0501')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0503')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0505')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0507')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0509')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u050B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0511')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0513')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0515')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0517')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0519')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0521')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0523')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0525')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0527')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0529')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u052D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0561' && this->source.get()[startLocation__] <= U'\u0587')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u13F8' && this->source.get()[startLocation__] <= U'\u13FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D00' && this->source.get()[startLocation__] <= U'\u1D2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D6B' && this->source.get()[startLocation__] <= U'\u1D77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D79' && this->source.get()[startLocation__] <= U'\u1D9A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E05')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E07')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E09')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E11')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E13')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E15')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E17')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E21')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E23')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E25')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E29')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E31')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E51')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E53')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E55')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E65')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E73')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E79')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E85')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E93')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1E95' && this->source.get()[startLocation__] <= U'\u1E9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EFD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1EFF' && this->source.get()[startLocation__] <= U'\u1F07')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F10' && this->source.get()[startLocation__] <= U'\u1F15')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F20' && this->source.get()[startLocation__] <= U'\u1F27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F30' && this->source.get()[startLocation__] <= U'\u1F37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F40' && this->source.get()[startLocation__] <= U'\u1F45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F50' && this->source.get()[startLocation__] <= U'\u1F57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F60' && this->source.get()[startLocation__] <= U'\u1F67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F70' && this->source.get()[startLocation__] <= U'\u1F7D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1F80' && this->source.get()[startLocation__] <= U'\u1F87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F90' && this->source.get()[startLocation__] <= U'\u1F97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FA0' && this->source.get()[startLocation__] <= U'\u1FA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB0' && this->source.get()[startLocation__] <= U'\u1FB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB6' && this->source.get()[startLocation__] <= U'\u1FB7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1FBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC2' && this->source.get()[startLocation__] <= U'\u1FC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC6' && this->source.get()[startLocation__] <= U'\u1FC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FD0' && this->source.get()[startLocation__] <= U'\u1FD3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1FD6' && this->source.get()[startLocation__] <= U'\u1FD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FE0' && this->source.get()[startLocation__] <= U'\u1FE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FF2' && this->source.get()[startLocation__] <= U'\u1FF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FF6' && this->source.get()[startLocation__] <= U'\u1FF7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u210A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u210E' && this->source.get()[startLocation__] <= U'\u210F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2113')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u212F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2139')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u213C' && this->source.get()[startLocation__] <= U'\u213D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2146' && this->source.get()[startLocation__] <= U'\u2149')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u214E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2184')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C30' && this->source.get()[startLocation__] <= U'\u2C5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C65' && this->source.get()[startLocation__] <= U'\u2C66')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C68')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C73' && this->source.get()[startLocation__] <= U'\u2C74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C76' && this->source.get()[startLocation__] <= U'\u2C7B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C85')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C93')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C95')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C99')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2CE3' && this->source.get()[startLocation__] <= U'\u2CE4')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D00' && this->source.get()[startLocation__] <= U'\u2D25')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D2D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA641')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA643')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA645')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA647')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA649')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA651')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA653')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA655')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA657')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA659')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA661')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA663')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA665')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA667')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA669')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA681')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA683')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA685')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA687')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA689')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA691')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA693')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA695')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA697')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA699')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA69B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA723')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA725')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA727')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA729')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA72F' && this->source.get()[startLocation__] <= U'\uA731')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA733')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA735')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA737')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA739')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA741')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA743')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA745')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA747')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA749')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA751')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA753')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA755')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA757')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA759')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA761')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA763')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA765')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA767')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA769')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA771' && this->source.get()[startLocation__] <= U'\uA778')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA77C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA781')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA783')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA785')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA787')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA791')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA793' && this->source.get()[startLocation__] <= U'\uA795')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA797')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA799')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA7A3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB30' && this->source.get()[startLocation__] <= U'\uAB5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB60' && this->source.get()[startLocation__] <= U'\uAB65')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB70' && this->source.get()[startLocation__] <= U'\uABBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB00' && this->source.get()[startLocation__] <= U'\uFB06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB13' && this->source.get()[startLocation__] <= U'\uFB17')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFF41' && this->source.get()[startLocation__] <= U'\uFF5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010428' && this->source.get()[startLocation__] <= U'\U0001044F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010CC0' && this->source.get()[startLocation__] <= U'\U00010CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118C0' && this->source.get()[startLocation__] <= U'\U000118DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D41A' && this->source.get()[startLocation__] <= U'\U0001D433')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D44E' && this->source.get()[startLocation__] <= U'\U0001D454')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFF41-\\uFF5A\\U00010428-\\U0001044F\\U00010CC0-\\U00010CF2\\U000118C0-\\U000118DF\\U0001D41A-\\U0001D433\\U0001D44E-\\U0001D454]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D456' && this->source.get()[startLocation__] <= U'\U0001D467')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D482' && this->source.get()[startLocation__] <= U'\U0001D49B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4B6' && this->source.get()[startLocation__] <= U'\U0001D4B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D4BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4BD' && this->source.get()[startLocation__] <= U'\U0001D4C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4C5' && this->source.get()[startLocation__] <= U'\U0001D4CF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D456-\\U0001D467\\U0001D482-\\U0001D49B\\U0001D4B6-\\U0001D4B9\\U0001D4BB\\U0001D4BD-\\U0001D4C3\\U0001D4C5-\\U0001D4CF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D4EA' && this->source.get()[startLocation__] <= U'\U0001D503')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D51E' && this->source.get()[startLocation__] <= U'\U0001D537')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D552' && this->source.get()[startLocation__] <= U'\U0001D56B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D586' && this->source.get()[startLocation__] <= U'\U0001D59F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5BA' && this->source.get()[startLocation__] <= U'\U0001D5D3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D4EA-\\U0001D503\\U0001D51E-\\U0001D537\\U0001D552-\\U0001D56B\\U0001D586-\\U0001D59F\\U0001D5BA-\\U0001D5D3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D5EE' && this->source.get()[startLocation__] <= U'\U0001D607')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D622' && this->source.get()[startLocation__] <= U'\U0001D63B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D656' && this->source.get()[startLocation__] <= U'\U0001D66F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D68A' && this->source.get()[startLocation__] <= U'\U0001D6A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6C2' && this->source.get()[startLocation__] <= U'\U0001D6DA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D5EE-\\U0001D607\\U0001D622-\\U0001D63B\\U0001D656-\\U0001D66F\\U0001D68A-\\U0001D6A5\\U0001D6C2-\\U0001D6DA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D6DC' && this->source.get()[startLocation__] <= U'\U0001D6E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6FC' && this->source.get()[startLocation__] <= U'\U0001D714')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D716' && this->source.get()[startLocation__] <= U'\U0001D71B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D736' && this->source.get()[startLocation__] <= U'\U0001D74E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D750' && this->source.get()[startLocation__] <= U'\U0001D755')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D6DC-\\U0001D6E1\\U0001D6FC-\\U0001D714\\U0001D716-\\U0001D71B\\U0001D736-\\U0001D74E\\U0001D750-\\U0001D755]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D770' && this->source.get()[startLocation__] <= U'\U0001D788')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D78A' && this->source.get()[startLocation__] <= U'\U0001D78F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D7AA' && this->source.get()[startLocation__] <= U'\U0001D7C2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D7C4' && this->source.get()[startLocation__] <= U'\U0001D7C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D7CB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D770-\\U0001D788\\U0001D78A-\\U0001D78F\\U0001D7AA-\\U0001D7C2\\U0001D7C4-\\U0001D7C9\\U0001D7CB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryLl(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLl;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char8{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char9{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char10{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char11{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char12{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char13{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char14{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char15{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char16{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char17{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char18{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char19{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char20{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char21{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char22{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char23{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char24{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char25{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char26{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char27{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char28{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char29{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char30{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char31{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char32{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char33{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char34{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char35{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char36{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char37{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char38{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char39{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char40{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char41{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char42{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char43{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char44{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'z')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00B5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00DF' && this->source.get()[startLocation__] <= U'\u00F6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00F8' && this->source.get()[startLocation__] <= U'\u00FF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0101')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0103')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0105')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0107')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0109')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010B')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010D')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u010F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0111')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0113')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0115')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [a-z\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 72 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char0;
#line 12787 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0117')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0119')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u011F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0121')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0123')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0125')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0127')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0129')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u012F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0131')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0133')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0135')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0137' && this->source.get()[startLocation__] <= U'\u0138')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 73 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char1;
#line 12887 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u013A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u013E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0140')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0142')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0144')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0146')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0148' && this->source.get()[startLocation__] <= U'\u0149')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u014F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0151')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0153')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0155')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0157')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0159')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 74 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char2;
#line 12991 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u015B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u015F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0161')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0163')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0165')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0167')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0169')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u016F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0171')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0173')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0175')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0177')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u017C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 75 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char3;
#line 13099 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u017E' && this->source.get()[startLocation__] <= U'\u0180')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0183')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0185')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0188')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u018C' && this->source.get()[startLocation__] <= U'\u018D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0192')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0195')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0199' && this->source.get()[startLocation__] <= U'\u019B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u019E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01AA' && this->source.get()[startLocation__] <= U'\u01AB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 76 "parser_imp.grammar"
                                                                                                                                                   returnValue__ = char4;
#line 13195 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01B9' && this->source.get()[startLocation__] <= U'\u01BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01BD' && this->source.get()[startLocation__] <= U'\u01BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01D8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 77 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char5;
#line 13295 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01DC' && this->source.get()[startLocation__] <= U'\u01DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u01EF' && this->source.get()[startLocation__] <= U'\u01F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 78 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char6;
#line 13395 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u01FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u01FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0201')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0203')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0205')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0207')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0209')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u020F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0211')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0213')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0215')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0217')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0219')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u021D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 79 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char7;
#line 13503 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u021F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0221')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0223')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0225')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0227')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0229')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u022F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0231')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0233' && this->source.get()[startLocation__] <= U'\u0239')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u023C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u023F' && this->source.get()[startLocation__] <= U'\u0240')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0242')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0247')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char8 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 80 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char8;
#line 13603 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0249')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u024D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u024F' && this->source.get()[startLocation__] <= U'\u0293')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0295' && this->source.get()[startLocation__] <= U'\u02AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0371')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0373')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0377')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u037B' && this->source.get()[startLocation__] <= U'\u037D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0390')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03AC' && this->source.get()[startLocation__] <= U'\u03CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03D0' && this->source.get()[startLocation__] <= U'\u03D1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char9 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 81 "parser_imp.grammar"
                                                                                                                                              returnValue__ = char9;
#line 13691 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u03D5' && this->source.get()[startLocation__] <= U'\u03D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u03EF' && this->source.get()[startLocation__] <= U'\u03F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u03F8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char10 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 82 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char10;
#line 13791 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u03FB' && this->source.get()[startLocation__] <= U'\u03FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0430' && this->source.get()[startLocation__] <= U'\u045F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0461')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0463')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0465')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0467')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0469')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u046F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0471')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0473')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0475')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0477')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0479')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char11 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 83 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char11;
#line 13891 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u047B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u047F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0481')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u048F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0491')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0493')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0495')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0497')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0499')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u049F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char12 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 84 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char12;
#line 13999 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04C6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char13 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 85 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char13;
#line 14107 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04C8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04CC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u04CE' && this->source.get()[startLocation__] <= U'\u04CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04E7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char14 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 86 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char14;
#line 14211 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u04E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u04FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0501')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0503')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0505')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0507')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0509')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char15 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 87 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char15;
#line 14319 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u050B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u050F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0511')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0513')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0515')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0517')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0519')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u051F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0521')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0523')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0525')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0527')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0529')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char16 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 88 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char16;
#line 14427 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u052D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u052F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0561' && this->source.get()[startLocation__] <= U'\u0587')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u13F8' && this->source.get()[startLocation__] <= U'\u13FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D00' && this->source.get()[startLocation__] <= U'\u1D2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D6B' && this->source.get()[startLocation__] <= U'\u1D77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D79' && this->source.get()[startLocation__] <= U'\u1D9A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E05')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E07')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char17 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 89 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char17;
#line 14511 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E09')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E11')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E13')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E15')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E17')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E1F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E21')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E23')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E25')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E29')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char18 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 90 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char18;
#line 14619 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E31')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char19 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 91 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char19;
#line 14727 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E4F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E51')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E53')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E55')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E65')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E6D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char20 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 92 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char20;
#line 14835 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E73')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E79')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E85')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E8F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char21 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 93 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char21;
#line 14943 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1E91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E93')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1E95' && this->source.get()[startLocation__] <= U'\u1E9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1E9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EB7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char22 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 94 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char22;
#line 15047 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ECF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1ED9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char23 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 95 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char23;
#line 15155 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EE9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1EFB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char24 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 96 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char24;
#line 15263 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1EFD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1EFF' && this->source.get()[startLocation__] <= U'\u1F07')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F10' && this->source.get()[startLocation__] <= U'\u1F15')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F20' && this->source.get()[startLocation__] <= U'\u1F27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F30' && this->source.get()[startLocation__] <= U'\u1F37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F40' && this->source.get()[startLocation__] <= U'\u1F45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F50' && this->source.get()[startLocation__] <= U'\u1F57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F60' && this->source.get()[startLocation__] <= U'\u1F67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F70' && this->source.get()[startLocation__] <= U'\u1F7D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char25 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 97 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char25;
#line 15339 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1F80' && this->source.get()[startLocation__] <= U'\u1F87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1F90' && this->source.get()[startLocation__] <= U'\u1F97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FA0' && this->source.get()[startLocation__] <= U'\u1FA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB0' && this->source.get()[startLocation__] <= U'\u1FB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FB6' && this->source.get()[startLocation__] <= U'\u1FB7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1FBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC2' && this->source.get()[startLocation__] <= U'\u1FC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FC6' && this->source.get()[startLocation__] <= U'\u1FC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FD0' && this->source.get()[startLocation__] <= U'\u1FD3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char26 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 98 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char26;
#line 15415 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1FD6' && this->source.get()[startLocation__] <= U'\u1FD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FE0' && this->source.get()[startLocation__] <= U'\u1FE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FF2' && this->source.get()[startLocation__] <= U'\u1FF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1FF6' && this->source.get()[startLocation__] <= U'\u1FF7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u210A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u210E' && this->source.get()[startLocation__] <= U'\u210F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2113')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u212F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2139')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u213C' && this->source.get()[startLocation__] <= U'\u213D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char27 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 99 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char27;
#line 15499 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2146' && this->source.get()[startLocation__] <= U'\u2149')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u214E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2184')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C30' && this->source.get()[startLocation__] <= U'\u2C5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C65' && this->source.get()[startLocation__] <= U'\u2C66')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C68')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C73' && this->source.get()[startLocation__] <= U'\u2C74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C76' && this->source.get()[startLocation__] <= U'\u2C7B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char28 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 100 "parser_imp.grammar"
                                                                                                                                               returnValue__ = char28;
#line 15587 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2C81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C85')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C87')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C93')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C95')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C99')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2C9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char29 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 101 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char29;
#line 15695 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char30 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 102 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char30;
#line 15803 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CCF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CD9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2CE3' && this->source.get()[startLocation__] <= U'\u2CE4')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char31 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 103 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char31;
#line 15907 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2CEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2CF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D00' && this->source.get()[startLocation__] <= U'\u2D25')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D2D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA641')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA643')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA645')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA647')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA649')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA64F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA651')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA653')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char32 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 104 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char32;
#line 16011 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA655')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA657')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA659')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA65F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA661')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA663')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA665')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA667')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA669')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA681')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA683')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA685')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA687')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char33 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 105 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char33;
#line 16119 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA689')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA68F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA691')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA693')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA695')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA697')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA699')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA69B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA723')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA725')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA727')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA729')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA72D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA72F' && this->source.get()[startLocation__] <= U'\uA731')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char34 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 106 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char34;
#line 16227 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA733')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA735')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA737')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA739')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA73F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA741')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA743')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA745')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA747')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA749')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA74F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA751')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA753')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char35 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 107 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char35;
#line 16335 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA755')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA757')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA759')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA75F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA761')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA763')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA765')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA767')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA769')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA76F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA771' && this->source.get()[startLocation__] <= U'\uA778')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char36 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 108 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char36;
#line 16439 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA77C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA77F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA781')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA783')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA785')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA787')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA791')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA793' && this->source.get()[startLocation__] <= U'\uA795')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA797')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA799')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA79F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char37 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 109 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char37;
#line 16543 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA7A3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB30' && this->source.get()[startLocation__] <= U'\uAB5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB60' && this->source.get()[startLocation__] <= U'\uAB65')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB70' && this->source.get()[startLocation__] <= U'\uABBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB00' && this->source.get()[startLocation__] <= U'\uFB06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB13' && this->source.get()[startLocation__] <= U'\uFB17')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char38 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 110 "parser_imp.grammar"
                                                                                                                                               returnValue__ = char38;
#line 16631 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFF41' && this->source.get()[startLocation__] <= U'\uFF5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010428' && this->source.get()[startLocation__] <= U'\U0001044F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010CC0' && this->source.get()[startLocation__] <= U'\U00010CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118C0' && this->source.get()[startLocation__] <= U'\U000118DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D41A' && this->source.get()[startLocation__] <= U'\U0001D433')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D44E' && this->source.get()[startLocation__] <= U'\U0001D454')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char39 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFF41-\\uFF5A\\U00010428-\\U0001044F\\U00010CC0-\\U00010CF2\\U000118C0-\\U000118DF\\U0001D41A-\\U0001D433\\U0001D44E-\\U0001D454]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 111 "parser_imp.grammar"
                                                                                                                                                          returnValue__ = char39;
#line 16695 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D456' && this->source.get()[startLocation__] <= U'\U0001D467')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D482' && this->source.get()[startLocation__] <= U'\U0001D49B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4B6' && this->source.get()[startLocation__] <= U'\U0001D4B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D4BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4BD' && this->source.get()[startLocation__] <= U'\U0001D4C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D4C5' && this->source.get()[startLocation__] <= U'\U0001D4CF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char40 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D456-\\U0001D467\\U0001D482-\\U0001D49B\\U0001D4B6-\\U0001D4B9\\U0001D4BB\\U0001D4BD-\\U0001D4C3\\U0001D4C5-\\U0001D4CF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 112 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char40;
#line 16759 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D4EA' && this->source.get()[startLocation__] <= U'\U0001D503')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D51E' && this->source.get()[startLocation__] <= U'\U0001D537')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D552' && this->source.get()[startLocation__] <= U'\U0001D56B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D586' && this->source.get()[startLocation__] <= U'\U0001D59F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D5BA' && this->source.get()[startLocation__] <= U'\U0001D5D3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char41 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D4EA-\\U0001D503\\U0001D51E-\\U0001D537\\U0001D552-\\U0001D56B\\U0001D586-\\U0001D59F\\U0001D5BA-\\U0001D5D3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 113 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char41;
#line 16819 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D5EE' && this->source.get()[startLocation__] <= U'\U0001D607')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D622' && this->source.get()[startLocation__] <= U'\U0001D63B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D656' && this->source.get()[startLocation__] <= U'\U0001D66F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D68A' && this->source.get()[startLocation__] <= U'\U0001D6A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6C2' && this->source.get()[startLocation__] <= U'\U0001D6DA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char42 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D5EE-\\U0001D607\\U0001D622-\\U0001D63B\\U0001D656-\\U0001D66F\\U0001D68A-\\U0001D6A5\\U0001D6C2-\\U0001D6DA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 114 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char42;
#line 16879 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D6DC' && this->source.get()[startLocation__] <= U'\U0001D6E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D6FC' && this->source.get()[startLocation__] <= U'\U0001D714')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D716' && this->source.get()[startLocation__] <= U'\U0001D71B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D736' && this->source.get()[startLocation__] <= U'\U0001D74E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D750' && this->source.get()[startLocation__] <= U'\U0001D755')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char43 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D6DC-\\U0001D6E1\\U0001D6FC-\\U0001D714\\U0001D716-\\U0001D71B\\U0001D736-\\U0001D74E\\U0001D750-\\U0001D755]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 115 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char43;
#line 16939 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D770' && this->source.get()[startLocation__] <= U'\U0001D788')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D78A' && this->source.get()[startLocation__] <= U'\U0001D78F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D7AA' && this->source.get()[startLocation__] <= U'\U0001D7C2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D7C4' && this->source.get()[startLocation__] <= U'\U0001D7C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001D7CB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char44 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D770-\\U0001D788\\U0001D78A-\\U0001D78F\\U0001D7AA-\\U0001D7C2\\U0001D7C4-\\U0001D7C9\\U0001D7CB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 116 "parser_imp.grammar"
                                                                                                                                  returnValue__ = char44;
#line 16999 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryLt()
{
    auto result = internalParseUnicodeCategoryLt(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryLt(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryLt(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLt;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u01C5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01C8')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01CB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01F2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1F88' && this->source.get()[startLocation__] <= U'\u1F8F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1F98' && this->source.get()[startLocation__] <= U'\u1F9F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1FA8' && this->source.get()[startLocation__] <= U'\u1FAF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FBC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FCC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FFC')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryLt(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLt;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u01C5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01C8')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01CB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01F2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1F88' && this->source.get()[startLocation__] <= U'\u1F8F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1F98' && this->source.get()[startLocation__] <= U'\u1F9F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1FA8' && this->source.get()[startLocation__] <= U'\u1FAF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FBC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FCC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1FFC')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 118 "parser_imp.grammar"
                                                                                                                    returnValue__ = char0;
#line 17166 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryLm()
{
    auto result = internalParseUnicodeCategoryLm(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryLm(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryLm(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLm;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u02B0' && this->source.get()[startLocation__] <= U'\u02C1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u02C6' && this->source.get()[startLocation__] <= U'\u02D1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u02E0' && this->source.get()[startLocation__] <= U'\u02E4')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u02EC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u02EE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0374')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u037A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0559')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0640')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u06E5' && this->source.get()[startLocation__] <= U'\u06E6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u07F4' && this->source.get()[startLocation__] <= U'\u07F5')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u07FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u081A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0824')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0828')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0971')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E46')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u10FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1843')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1AA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C78' && this->source.get()[startLocation__] <= U'\u1C7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D2C' && this->source.get()[startLocation__] <= U'\u1D6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1D78')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D9B' && this->source.get()[startLocation__] <= U'\u1DBF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2071')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u207F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2090' && this->source.get()[startLocation__] <= U'\u209C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C7C' && this->source.get()[startLocation__] <= U'\u2C7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2E2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3005')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3031' && this->source.get()[startLocation__] <= U'\u3035')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u303B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u309D' && this->source.get()[startLocation__] <= U'\u309E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u30FC' && this->source.get()[startLocation__] <= U'\u30FE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA015')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA4F8' && this->source.get()[startLocation__] <= U'\uA4FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA60C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA67F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA69C' && this->source.get()[startLocation__] <= U'\uA69D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA717' && this->source.get()[startLocation__] <= U'\uA71F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA770')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA788')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7F8' && this->source.get()[startLocation__] <= U'\uA7F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAADD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAAF3' && this->source.get()[startLocation__] <= U'\uAAF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB5C' && this->source.get()[startLocation__] <= U'\uAB5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFF70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF9E' && this->source.get()[startLocation__] <= U'\uFF9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B40' && this->source.get()[startLocation__] <= U'\U00016B43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F93' && this->source.get()[startLocation__] <= U'\U00016F9F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAF3-\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F\\U00016B40-\\U00016B43\\U00016F93-\\U00016F9F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryLm(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLm;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u02B0' && this->source.get()[startLocation__] <= U'\u02C1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u02C6' && this->source.get()[startLocation__] <= U'\u02D1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u02E0' && this->source.get()[startLocation__] <= U'\u02E4')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u02EC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u02EE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0374')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u037A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0559')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0640')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u06E5' && this->source.get()[startLocation__] <= U'\u06E6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u07F4' && this->source.get()[startLocation__] <= U'\u07F5')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 120 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char0;
#line 17657 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u07FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u081A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0824')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0828')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0971')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E46')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u10FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1843')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1AA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C78' && this->source.get()[startLocation__] <= U'\u1C7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D2C' && this->source.get()[startLocation__] <= U'\u1D6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1D78')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1D9B' && this->source.get()[startLocation__] <= U'\u1DBF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 121 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char1;
#line 17749 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u2071')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u207F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2090' && this->source.get()[startLocation__] <= U'\u209C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2C7C' && this->source.get()[startLocation__] <= U'\u2C7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2E2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3005')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3031' && this->source.get()[startLocation__] <= U'\u3035')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u303B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u309D' && this->source.get()[startLocation__] <= U'\u309E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u30FC' && this->source.get()[startLocation__] <= U'\u30FE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 122 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char2;
#line 17833 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uA015')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA4F8' && this->source.get()[startLocation__] <= U'\uA4FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA60C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA67F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA69C' && this->source.get()[startLocation__] <= U'\uA69D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA717' && this->source.get()[startLocation__] <= U'\uA71F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA770')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA788')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7F8' && this->source.get()[startLocation__] <= U'\uA7F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9E6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAADD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 123 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char3;
#line 17925 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAAF3' && this->source.get()[startLocation__] <= U'\uAAF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB5C' && this->source.get()[startLocation__] <= U'\uAB5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFF70')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF9E' && this->source.get()[startLocation__] <= U'\uFF9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B40' && this->source.get()[startLocation__] <= U'\U00016B43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F93' && this->source.get()[startLocation__] <= U'\U00016F9F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAF3-\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F\\U00016B40-\\U00016B43\\U00016F93-\\U00016F9F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 124 "parser_imp.grammar"
                                                                                                                          returnValue__ = char4;
#line 17989 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryLo()
{
    auto result = internalParseUnicodeCategoryLo(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryLo(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryLo(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLo;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u00AA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01BB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u01C0' && this->source.get()[startLocation__] <= U'\u01C3')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0294')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05D0' && this->source.get()[startLocation__] <= U'\u05EA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05F0' && this->source.get()[startLocation__] <= U'\u05F2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0620' && this->source.get()[startLocation__] <= U'\u063F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0641' && this->source.get()[startLocation__] <= U'\u064A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u066E' && this->source.get()[startLocation__] <= U'\u066F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u00AA\\u00BA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0671' && this->source.get()[startLocation__] <= U'\u06D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u06D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06EE' && this->source.get()[startLocation__] <= U'\u06EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06FA' && this->source.get()[startLocation__] <= U'\u06FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u06FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0710')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0712' && this->source.get()[startLocation__] <= U'\u072F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u074D' && this->source.get()[startLocation__] <= U'\u07A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u07B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07CA' && this->source.get()[startLocation__] <= U'\u07EA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0800' && this->source.get()[startLocation__] <= U'\u0815')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0840' && this->source.get()[startLocation__] <= U'\u0858')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u08A0' && this->source.get()[startLocation__] <= U'\u08B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0904' && this->source.get()[startLocation__] <= U'\u0939')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0950')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0958' && this->source.get()[startLocation__] <= U'\u0961')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0972' && this->source.get()[startLocation__] <= U'\u0980')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0985' && this->source.get()[startLocation__] <= U'\u098C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u098F' && this->source.get()[startLocation__] <= U'\u0990')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0993' && this->source.get()[startLocation__] <= U'\u09A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09AA' && this->source.get()[startLocation__] <= U'\u09B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09B6' && this->source.get()[startLocation__] <= U'\u09B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09DC' && this->source.get()[startLocation__] <= U'\u09DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09DF' && this->source.get()[startLocation__] <= U'\u09E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09F0' && this->source.get()[startLocation__] <= U'\u09F1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0A05' && this->source.get()[startLocation__] <= U'\u0A0A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A0F' && this->source.get()[startLocation__] <= U'\u0A10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A13' && this->source.get()[startLocation__] <= U'\u0A28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A2A' && this->source.get()[startLocation__] <= U'\u0A30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A32' && this->source.get()[startLocation__] <= U'\u0A33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A35' && this->source.get()[startLocation__] <= U'\u0A36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A38' && this->source.get()[startLocation__] <= U'\u0A39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A59' && this->source.get()[startLocation__] <= U'\u0A5C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A72' && this->source.get()[startLocation__] <= U'\u0A74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A85' && this->source.get()[startLocation__] <= U'\u0A8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A8F' && this->source.get()[startLocation__] <= U'\u0A91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A93' && this->source.get()[startLocation__] <= U'\u0AA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AAA' && this->source.get()[startLocation__] <= U'\u0AB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AB2' && this->source.get()[startLocation__] <= U'\u0AB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AB5' && this->source.get()[startLocation__] <= U'\u0AB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ABD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0AD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AE0' && this->source.get()[startLocation__] <= U'\u0AE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0AF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B05' && this->source.get()[startLocation__] <= U'\u0B0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B0F' && this->source.get()[startLocation__] <= U'\u0B10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B13' && this->source.get()[startLocation__] <= U'\u0B28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B2A' && this->source.get()[startLocation__] <= U'\u0B30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B32' && this->source.get()[startLocation__] <= U'\u0B33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B35' && this->source.get()[startLocation__] <= U'\u0B39')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0B3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B5C' && this->source.get()[startLocation__] <= U'\u0B5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B5F' && this->source.get()[startLocation__] <= U'\u0B61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B85' && this->source.get()[startLocation__] <= U'\u0B8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B8E' && this->source.get()[startLocation__] <= U'\u0B90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B92' && this->source.get()[startLocation__] <= U'\u0B95')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B99' && this->source.get()[startLocation__] <= U'\u0B9A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B9C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0B9E' && this->source.get()[startLocation__] <= U'\u0B9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BA3' && this->source.get()[startLocation__] <= U'\u0BA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BA8' && this->source.get()[startLocation__] <= U'\u0BAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BAE' && this->source.get()[startLocation__] <= U'\u0BB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C05' && this->source.get()[startLocation__] <= U'\u0C0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C0E' && this->source.get()[startLocation__] <= U'\u0C10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C12' && this->source.get()[startLocation__] <= U'\u0C28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C2A' && this->source.get()[startLocation__] <= U'\u0C39')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0C3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C58' && this->source.get()[startLocation__] <= U'\u0C5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C60' && this->source.get()[startLocation__] <= U'\u0C61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C85' && this->source.get()[startLocation__] <= U'\u0C8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C8E' && this->source.get()[startLocation__] <= U'\u0C90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C92' && this->source.get()[startLocation__] <= U'\u0CA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CAA' && this->source.get()[startLocation__] <= U'\u0CB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CB5' && this->source.get()[startLocation__] <= U'\u0CB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0CDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE0' && this->source.get()[startLocation__] <= U'\u0CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CF1' && this->source.get()[startLocation__] <= U'\u0CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D05' && this->source.get()[startLocation__] <= U'\u0D0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D0E' && this->source.get()[startLocation__] <= U'\u0D10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D12' && this->source.get()[startLocation__] <= U'\u0D3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D5F' && this->source.get()[startLocation__] <= U'\u0D61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D7A' && this->source.get()[startLocation__] <= U'\u0D7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0D85' && this->source.get()[startLocation__] <= U'\u0D96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D9A' && this->source.get()[startLocation__] <= U'\u0DB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DB3' && this->source.get()[startLocation__] <= U'\u0DBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DC0' && this->source.get()[startLocation__] <= U'\u0DC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E01' && this->source.get()[startLocation__] <= U'\u0E30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E32' && this->source.get()[startLocation__] <= U'\u0E33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E40' && this->source.get()[startLocation__] <= U'\u0E45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E81' && this->source.get()[startLocation__] <= U'\u0E82')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0E84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E87' && this->source.get()[startLocation__] <= U'\u0E88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E94' && this->source.get()[startLocation__] <= U'\u0E97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E99' && this->source.get()[startLocation__] <= U'\u0E9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EA1' && this->source.get()[startLocation__] <= U'\u0EA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EAA' && this->source.get()[startLocation__] <= U'\u0EAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EAD' && this->source.get()[startLocation__] <= U'\u0EB0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0EB2' && this->source.get()[startLocation__] <= U'\u0EB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EC0' && this->source.get()[startLocation__] <= U'\u0EC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EDC' && this->source.get()[startLocation__] <= U'\u0EDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F40' && this->source.get()[startLocation__] <= U'\u0F47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F49' && this->source.get()[startLocation__] <= U'\u0F6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F88' && this->source.get()[startLocation__] <= U'\u0F8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1000' && this->source.get()[startLocation__] <= U'\u102A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u103F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1050' && this->source.get()[startLocation__] <= U'\u1055')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u105A' && this->source.get()[startLocation__] <= U'\u105D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1061')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1065' && this->source.get()[startLocation__] <= U'\u1066')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u106E' && this->source.get()[startLocation__] <= U'\u1070')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1075' && this->source.get()[startLocation__] <= U'\u1081')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10D0' && this->source.get()[startLocation__] <= U'\u10FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10FD' && this->source.get()[startLocation__] <= U'\u1248')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u124A' && this->source.get()[startLocation__] <= U'\u124D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1250' && this->source.get()[startLocation__] <= U'\u1256')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1258')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u125A' && this->source.get()[startLocation__] <= U'\u125D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1260' && this->source.get()[startLocation__] <= U'\u1288')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u128A' && this->source.get()[startLocation__] <= U'\u128D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1290' && this->source.get()[startLocation__] <= U'\u12B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12B2' && this->source.get()[startLocation__] <= U'\u12B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12B8' && this->source.get()[startLocation__] <= U'\u12BE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u12C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12C2' && this->source.get()[startLocation__] <= U'\u12C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12C8' && this->source.get()[startLocation__] <= U'\u12D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12D8' && this->source.get()[startLocation__] <= U'\u1310')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1312' && this->source.get()[startLocation__] <= U'\u1315')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1318' && this->source.get()[startLocation__] <= U'\u135A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1380' && this->source.get()[startLocation__] <= U'\u138F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1401' && this->source.get()[startLocation__] <= U'\u166C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u166F' && this->source.get()[startLocation__] <= U'\u167F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1681' && this->source.get()[startLocation__] <= U'\u169A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u16A0' && this->source.get()[startLocation__] <= U'\u16EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u16F1' && this->source.get()[startLocation__] <= U'\u16F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1700' && this->source.get()[startLocation__] <= U'\u170C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u170E' && this->source.get()[startLocation__] <= U'\u1711')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1720' && this->source.get()[startLocation__] <= U'\u1731')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1740' && this->source.get()[startLocation__] <= U'\u1751')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1760' && this->source.get()[startLocation__] <= U'\u176C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u176E' && this->source.get()[startLocation__] <= U'\u1770')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1780' && this->source.get()[startLocation__] <= U'\u17B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1820' && this->source.get()[startLocation__] <= U'\u1842')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1844' && this->source.get()[startLocation__] <= U'\u1877')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1880' && this->source.get()[startLocation__] <= U'\u18A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u18AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u18B0' && this->source.get()[startLocation__] <= U'\u18F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1900' && this->source.get()[startLocation__] <= U'\u191E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1950' && this->source.get()[startLocation__] <= U'\u196D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1970' && this->source.get()[startLocation__] <= U'\u1974')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1980' && this->source.get()[startLocation__] <= U'\u19AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u19B0' && this->source.get()[startLocation__] <= U'\u19C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A00' && this->source.get()[startLocation__] <= U'\u1A16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A20' && this->source.get()[startLocation__] <= U'\u1A54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B05' && this->source.get()[startLocation__] <= U'\u1B33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B45' && this->source.get()[startLocation__] <= U'\u1B4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B83' && this->source.get()[startLocation__] <= U'\u1BA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BAE' && this->source.get()[startLocation__] <= U'\u1BAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BBA' && this->source.get()[startLocation__] <= U'\u1BE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C00' && this->source.get()[startLocation__] <= U'\u1C23')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C4D' && this->source.get()[startLocation__] <= U'\u1C4F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C5A' && this->source.get()[startLocation__] <= U'\u1C77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CE9' && this->source.get()[startLocation__] <= U'\u1CEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CEE' && this->source.get()[startLocation__] <= U'\u1CF1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1CF5' && this->source.get()[startLocation__] <= U'\u1CF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2135' && this->source.get()[startLocation__] <= U'\u2138')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D30' && this->source.get()[startLocation__] <= U'\u2D67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D80' && this->source.get()[startLocation__] <= U'\u2D96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DA0' && this->source.get()[startLocation__] <= U'\u2DA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DA8' && this->source.get()[startLocation__] <= U'\u2DAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DB0' && this->source.get()[startLocation__] <= U'\u2DB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DB8' && this->source.get()[startLocation__] <= U'\u2DBE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2DC0' && this->source.get()[startLocation__] <= U'\u2DC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DC8' && this->source.get()[startLocation__] <= U'\u2DCE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DD0' && this->source.get()[startLocation__] <= U'\u2DD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DD8' && this->source.get()[startLocation__] <= U'\u2DDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3006')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u303C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3041' && this->source.get()[startLocation__] <= U'\u3096')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u309F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u30A1' && this->source.get()[startLocation__] <= U'\u30FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u30FF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u3105' && this->source.get()[startLocation__] <= U'\u312D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3131' && this->source.get()[startLocation__] <= U'\u318E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u31A0' && this->source.get()[startLocation__] <= U'\u31BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u31F0' && this->source.get()[startLocation__] <= U'\u31FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3400' && this->source.get()[startLocation__] <= U'\u4DB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u4E00' && this->source.get()[startLocation__] <= U'\u9FD5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA000' && this->source.get()[startLocation__] <= U'\uA014')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA016' && this->source.get()[startLocation__] <= U'\uA48C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA4D0' && this->source.get()[startLocation__] <= U'\uA4F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA500' && this->source.get()[startLocation__] <= U'\uA60B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA610' && this->source.get()[startLocation__] <= U'\uA61F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA62A' && this->source.get()[startLocation__] <= U'\uA62B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA6A0' && this->source.get()[startLocation__] <= U'\uA6E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7FB' && this->source.get()[startLocation__] <= U'\uA801')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA803' && this->source.get()[startLocation__] <= U'\uA805')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA807' && this->source.get()[startLocation__] <= U'\uA80A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA80C' && this->source.get()[startLocation__] <= U'\uA822')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA840' && this->source.get()[startLocation__] <= U'\uA873')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA882' && this->source.get()[startLocation__] <= U'\uA8B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8F2' && this->source.get()[startLocation__] <= U'\uA8F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA90A' && this->source.get()[startLocation__] <= U'\uA925')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA930' && this->source.get()[startLocation__] <= U'\uA946')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA960' && this->source.get()[startLocation__] <= U'\uA97C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA984' && this->source.get()[startLocation__] <= U'\uA9B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9E0' && this->source.get()[startLocation__] <= U'\uA9E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9E7' && this->source.get()[startLocation__] <= U'\uA9EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9FA' && this->source.get()[startLocation__] <= U'\uA9FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA00' && this->source.get()[startLocation__] <= U'\uAA28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA40' && this->source.get()[startLocation__] <= U'\uAA42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA44' && this->source.get()[startLocation__] <= U'\uAA4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA60' && this->source.get()[startLocation__] <= U'\uAA6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA71' && this->source.get()[startLocation__] <= U'\uAA76')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA7E' && this->source.get()[startLocation__] <= U'\uAAAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB5' && this->source.get()[startLocation__] <= U'\uAAB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB9' && this->source.get()[startLocation__] <= U'\uAABD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAADB' && this->source.get()[startLocation__] <= U'\uAADC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAAE0' && this->source.get()[startLocation__] <= U'\uAAEA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB01' && this->source.get()[startLocation__] <= U'\uAB06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB09' && this->source.get()[startLocation__] <= U'\uAB0E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB11' && this->source.get()[startLocation__] <= U'\uAB16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB20' && this->source.get()[startLocation__] <= U'\uAB26')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB28' && this->source.get()[startLocation__] <= U'\uAB2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABC0' && this->source.get()[startLocation__] <= U'\uABE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAC00' && this->source.get()[startLocation__] <= U'\uD7A3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uD7B0' && this->source.get()[startLocation__] <= U'\uD7C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uD7CB' && this->source.get()[startLocation__] <= U'\uD7FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uF900' && this->source.get()[startLocation__] <= U'\uFA6D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFA70' && this->source.get()[startLocation__] <= U'\uFAD9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB1F' && this->source.get()[startLocation__] <= U'\uFB28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB2A' && this->source.get()[startLocation__] <= U'\uFB36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB38' && this->source.get()[startLocation__] <= U'\uFB3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB3E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFB40' && this->source.get()[startLocation__] <= U'\uFB41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB43' && this->source.get()[startLocation__] <= U'\uFB44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB46' && this->source.get()[startLocation__] <= U'\uFBB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFBD3' && this->source.get()[startLocation__] <= U'\uFD3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD50' && this->source.get()[startLocation__] <= U'\uFD8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD92' && this->source.get()[startLocation__] <= U'\uFDC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFDF0' && this->source.get()[startLocation__] <= U'\uFDFB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE70' && this->source.get()[startLocation__] <= U'\uFE74')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFE76' && this->source.get()[startLocation__] <= U'\uFEFC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF66' && this->source.get()[startLocation__] <= U'\uFF6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF71' && this->source.get()[startLocation__] <= U'\uFF9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFA0' && this->source.get()[startLocation__] <= U'\uFFBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFC2' && this->source.get()[startLocation__] <= U'\uFFC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFCA' && this->source.get()[startLocation__] <= U'\uFFCF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFD2' && this->source.get()[startLocation__] <= U'\uFFD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFDA' && this->source.get()[startLocation__] <= U'\uFFDC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010000' && this->source.get()[startLocation__] <= U'\U0001000B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001000D' && this->source.get()[startLocation__] <= U'\U00010026')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010028' && this->source.get()[startLocation__] <= U'\U0001003A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001003C' && this->source.get()[startLocation__] <= U'\U0001003D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001003F' && this->source.get()[startLocation__] <= U'\U0001004D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010000-\\U0001000B\\U0001000D-\\U00010026\\U00010028-\\U0001003A\\U0001003C-\\U0001003D\\U0001003F-\\U0001004D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010050' && this->source.get()[startLocation__] <= U'\U0001005D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010080' && this->source.get()[startLocation__] <= U'\U000100FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010280' && this->source.get()[startLocation__] <= U'\U0001029C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000102A0' && this->source.get()[startLocation__] <= U'\U000102D0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010300' && this->source.get()[startLocation__] <= U'\U0001031F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010050-\\U0001005D\\U00010080-\\U000100FA\\U00010280-\\U0001029C\\U000102A0-\\U000102D0\\U00010300-\\U0001031F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010330' && this->source.get()[startLocation__] <= U'\U00010340')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010342' && this->source.get()[startLocation__] <= U'\U00010349')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010350' && this->source.get()[startLocation__] <= U'\U00010375')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010380' && this->source.get()[startLocation__] <= U'\U0001039D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000103A0' && this->source.get()[startLocation__] <= U'\U000103C3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010330-\\U00010340\\U00010342-\\U00010349\\U00010350-\\U00010375\\U00010380-\\U0001039D\\U000103A0-\\U000103C3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000103C8' && this->source.get()[startLocation__] <= U'\U000103CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010450' && this->source.get()[startLocation__] <= U'\U0001049D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010500' && this->source.get()[startLocation__] <= U'\U00010527')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010530' && this->source.get()[startLocation__] <= U'\U00010563')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010600' && this->source.get()[startLocation__] <= U'\U00010736')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000103C8-\\U000103CF\\U00010450-\\U0001049D\\U00010500-\\U00010527\\U00010530-\\U00010563\\U00010600-\\U00010736]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010740' && this->source.get()[startLocation__] <= U'\U00010755')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010760' && this->source.get()[startLocation__] <= U'\U00010767')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010800' && this->source.get()[startLocation__] <= U'\U00010805')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010808')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001080A' && this->source.get()[startLocation__] <= U'\U00010835')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010837' && this->source.get()[startLocation__] <= U'\U00010838')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010740-\\U00010755\\U00010760-\\U00010767\\U00010800-\\U00010805\\U00010808\\U0001080A-\\U00010835\\U00010837-\\U00010838]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001083C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001083F' && this->source.get()[startLocation__] <= U'\U00010855')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010860' && this->source.get()[startLocation__] <= U'\U00010876')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010880' && this->source.get()[startLocation__] <= U'\U0001089E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000108E0' && this->source.get()[startLocation__] <= U'\U000108F2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000108F4' && this->source.get()[startLocation__] <= U'\U000108F5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001083C\\U0001083F-\\U00010855\\U00010860-\\U00010876\\U00010880-\\U0001089E\\U000108E0-\\U000108F2\\U000108F4-\\U000108F5]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010900' && this->source.get()[startLocation__] <= U'\U00010915')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010920' && this->source.get()[startLocation__] <= U'\U00010939')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010980' && this->source.get()[startLocation__] <= U'\U000109B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000109BE' && this->source.get()[startLocation__] <= U'\U000109BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010A00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A10' && this->source.get()[startLocation__] <= U'\U00010A13')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010900-\\U00010915\\U00010920-\\U00010939\\U00010980-\\U000109B7\\U000109BE-\\U000109BF\\U00010A00\\U00010A10-\\U00010A13]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010A15' && this->source.get()[startLocation__] <= U'\U00010A17')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A19' && this->source.get()[startLocation__] <= U'\U00010A33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A60' && this->source.get()[startLocation__] <= U'\U00010A7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A80' && this->source.get()[startLocation__] <= U'\U00010A9C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010AC0' && this->source.get()[startLocation__] <= U'\U00010AC7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010A15-\\U00010A17\\U00010A19-\\U00010A33\\U00010A60-\\U00010A7C\\U00010A80-\\U00010A9C\\U00010AC0-\\U00010AC7]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010AC9' && this->source.get()[startLocation__] <= U'\U00010AE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B00' && this->source.get()[startLocation__] <= U'\U00010B35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B40' && this->source.get()[startLocation__] <= U'\U00010B55')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B60' && this->source.get()[startLocation__] <= U'\U00010B72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B80' && this->source.get()[startLocation__] <= U'\U00010B91')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010AC9-\\U00010AE4\\U00010B00-\\U00010B35\\U00010B40-\\U00010B55\\U00010B60-\\U00010B72\\U00010B80-\\U00010B91]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010C00' && this->source.get()[startLocation__] <= U'\U00010C48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011003' && this->source.get()[startLocation__] <= U'\U00011037')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011083' && this->source.get()[startLocation__] <= U'\U000110AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110D0' && this->source.get()[startLocation__] <= U'\U000110E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011103' && this->source.get()[startLocation__] <= U'\U00011126')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010C00-\\U00010C48\\U00011003-\\U00011037\\U00011083-\\U000110AF\\U000110D0-\\U000110E8\\U00011103-\\U00011126]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011150' && this->source.get()[startLocation__] <= U'\U00011172')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011176')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011183' && this->source.get()[startLocation__] <= U'\U000111B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111C1' && this->source.get()[startLocation__] <= U'\U000111C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000111DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000111DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011200' && this->source.get()[startLocation__] <= U'\U00011211')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011150-\\U00011172\\U00011176\\U00011183-\\U000111B2\\U000111C1-\\U000111C4\\U000111DA\\U000111DC\\U00011200-\\U00011211]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011213' && this->source.get()[startLocation__] <= U'\U0001122B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011280' && this->source.get()[startLocation__] <= U'\U00011286')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011288')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001128A' && this->source.get()[startLocation__] <= U'\U0001128D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001128F' && this->source.get()[startLocation__] <= U'\U0001129D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001129F' && this->source.get()[startLocation__] <= U'\U000112A8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011213-\\U0001122B\\U00011280-\\U00011286\\U00011288\\U0001128A-\\U0001128D\\U0001128F-\\U0001129D\\U0001129F-\\U000112A8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000112B0' && this->source.get()[startLocation__] <= U'\U000112DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011305' && this->source.get()[startLocation__] <= U'\U0001130C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001130F' && this->source.get()[startLocation__] <= U'\U00011310')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011313' && this->source.get()[startLocation__] <= U'\U00011328')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001132A' && this->source.get()[startLocation__] <= U'\U00011330')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000112B0-\\U000112DE\\U00011305-\\U0001130C\\U0001130F-\\U00011310\\U00011313-\\U00011328\\U0001132A-\\U00011330]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011332' && this->source.get()[startLocation__] <= U'\U00011333')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011335' && this->source.get()[startLocation__] <= U'\U00011339')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001133D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011350')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001135D' && this->source.get()[startLocation__] <= U'\U00011361')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011480' && this->source.get()[startLocation__] <= U'\U000114AF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011332-\\U00011333\\U00011335-\\U00011339\\U0001133D\\U00011350\\U0001135D-\\U00011361\\U00011480-\\U000114AF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114C4' && this->source.get()[startLocation__] <= U'\U000114C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011580' && this->source.get()[startLocation__] <= U'\U000115AE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115D8' && this->source.get()[startLocation__] <= U'\U000115DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011600' && this->source.get()[startLocation__] <= U'\U0001162F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011644')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114C4-\\U000114C5\\U000114C7\\U00011580-\\U000115AE\\U000115D8-\\U000115DB\\U00011600-\\U0001162F\\U00011644]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011680' && this->source.get()[startLocation__] <= U'\U000116AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011700' && this->source.get()[startLocation__] <= U'\U00011719')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000118FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011AC0' && this->source.get()[startLocation__] <= U'\U00011AF8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012000' && this->source.get()[startLocation__] <= U'\U00012399')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012480' && this->source.get()[startLocation__] <= U'\U00012543')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011680-\\U000116AA\\U00011700-\\U00011719\\U000118FF\\U00011AC0-\\U00011AF8\\U00012000-\\U00012399\\U00012480-\\U00012543]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00013000' && this->source.get()[startLocation__] <= U'\U0001342E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00014400' && this->source.get()[startLocation__] <= U'\U00014646')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016800' && this->source.get()[startLocation__] <= U'\U00016A38')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016A40' && this->source.get()[startLocation__] <= U'\U00016A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016AD0' && this->source.get()[startLocation__] <= U'\U00016AED')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00013000-\\U0001342E\\U00014400-\\U00014646\\U00016800-\\U00016A38\\U00016A40-\\U00016A5E\\U00016AD0-\\U00016AED]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00016B00' && this->source.get()[startLocation__] <= U'\U00016B2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B63' && this->source.get()[startLocation__] <= U'\U00016B77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B7D' && this->source.get()[startLocation__] <= U'\U00016B8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F00' && this->source.get()[startLocation__] <= U'\U00016F44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00016F50')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001B000' && this->source.get()[startLocation__] <= U'\U0001B001')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00016B00-\\U00016B2F\\U00016B63-\\U00016B77\\U00016B7D-\\U00016B8F\\U00016F00-\\U00016F44\\U00016F50\\U0001B000-\\U0001B001]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001BC00' && this->source.get()[startLocation__] <= U'\U0001BC6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC70' && this->source.get()[startLocation__] <= U'\U0001BC7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC80' && this->source.get()[startLocation__] <= U'\U0001BC88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC90' && this->source.get()[startLocation__] <= U'\U0001BC99')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001E800' && this->source.get()[startLocation__] <= U'\U0001E8C4')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001BC00-\\U0001BC6A\\U0001BC70-\\U0001BC7C\\U0001BC80-\\U0001BC88\\U0001BC90-\\U0001BC99\\U0001E800-\\U0001E8C4]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE00' && this->source.get()[startLocation__] <= U'\U0001EE03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE05' && this->source.get()[startLocation__] <= U'\U0001EE1F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE21' && this->source.get()[startLocation__] <= U'\U0001EE22')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE24')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE29' && this->source.get()[startLocation__] <= U'\U0001EE32')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE00-\\U0001EE03\\U0001EE05-\\U0001EE1F\\U0001EE21-\\U0001EE22\\U0001EE24\\U0001EE27\\U0001EE29-\\U0001EE32]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE34' && this->source.get()[startLocation__] <= U'\U0001EE37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE4B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE4D' && this->source.get()[startLocation__] <= U'\U0001EE4F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE34-\\U0001EE37\\U0001EE39\\U0001EE3B\\U0001EE42\\U0001EE47\\U0001EE49\\U0001EE4B\\U0001EE4D-\\U0001EE4F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE51' && this->source.get()[startLocation__] <= U'\U0001EE52')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE61' && this->source.get()[startLocation__] <= U'\U0001EE62')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE51-\\U0001EE52\\U0001EE54\\U0001EE57\\U0001EE59\\U0001EE5B\\U0001EE5D\\U0001EE5F\\U0001EE61-\\U0001EE62]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001EE64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE67' && this->source.get()[startLocation__] <= U'\U0001EE6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE6C' && this->source.get()[startLocation__] <= U'\U0001EE72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE74' && this->source.get()[startLocation__] <= U'\U0001EE77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE79' && this->source.get()[startLocation__] <= U'\U0001EE7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE7E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE64\\U0001EE67-\\U0001EE6A\\U0001EE6C-\\U0001EE72\\U0001EE74-\\U0001EE77\\U0001EE79-\\U0001EE7C\\U0001EE7E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE80' && this->source.get()[startLocation__] <= U'\U0001EE89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE8B' && this->source.get()[startLocation__] <= U'\U0001EE9B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEA1' && this->source.get()[startLocation__] <= U'\U0001EEA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEA5' && this->source.get()[startLocation__] <= U'\U0001EEA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEAB' && this->source.get()[startLocation__] <= U'\U0001EEBB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE80-\\U0001EE89\\U0001EE8B-\\U0001EE9B\\U0001EEA1-\\U0001EEA3\\U0001EEA5-\\U0001EEA9\\U0001EEAB-\\U0001EEBB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00020000' && this->source.get()[startLocation__] <= U'\U0002A6D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002A700' && this->source.get()[startLocation__] <= U'\U0002B734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002B740' && this->source.get()[startLocation__] <= U'\U0002B81D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002B820' && this->source.get()[startLocation__] <= U'\U0002CEA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002F800' && this->source.get()[startLocation__] <= U'\U0002FA1D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00020000-\\U0002A6D6\\U0002A700-\\U0002B734\\U0002B740-\\U0002B81D\\U0002B820-\\U0002CEA1\\U0002F800-\\U0002FA1D]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryLo(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryLo;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char8{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char9{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char10{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char11{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char12{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char13{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char14{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char15{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char16{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char17{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char18{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char19{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char20{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char21{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char22{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char23{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char24{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char25{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char26{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char27{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char28{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char29{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char30{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char31{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char32{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char33{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char34{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char35{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char36{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char37{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char38{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char39{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char40{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char41{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char42{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char43{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char44{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char45{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char46{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char47{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char48{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char49{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char50{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char51{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char52{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char53{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char54{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char55{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char56{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u00AA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u01BB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u01C0' && this->source.get()[startLocation__] <= U'\u01C3')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0294')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05D0' && this->source.get()[startLocation__] <= U'\u05EA')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05F0' && this->source.get()[startLocation__] <= U'\u05F2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0620' && this->source.get()[startLocation__] <= U'\u063F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0641' && this->source.get()[startLocation__] <= U'\u064A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u066E' && this->source.get()[startLocation__] <= U'\u066F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u00AA\\u00BA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 126 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char0;
#line 21864 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0671' && this->source.get()[startLocation__] <= U'\u06D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u06D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06EE' && this->source.get()[startLocation__] <= U'\u06EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06FA' && this->source.get()[startLocation__] <= U'\u06FC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u06FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0710')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0712' && this->source.get()[startLocation__] <= U'\u072F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u074D' && this->source.get()[startLocation__] <= U'\u07A5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u07B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07CA' && this->source.get()[startLocation__] <= U'\u07EA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 127 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char1;
#line 21936 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0800' && this->source.get()[startLocation__] <= U'\u0815')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0840' && this->source.get()[startLocation__] <= U'\u0858')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u08A0' && this->source.get()[startLocation__] <= U'\u08B4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0904' && this->source.get()[startLocation__] <= U'\u0939')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0950')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0958' && this->source.get()[startLocation__] <= U'\u0961')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0972' && this->source.get()[startLocation__] <= U'\u0980')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0985' && this->source.get()[startLocation__] <= U'\u098C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 128 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char2;
#line 22012 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u098F' && this->source.get()[startLocation__] <= U'\u0990')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0993' && this->source.get()[startLocation__] <= U'\u09A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09AA' && this->source.get()[startLocation__] <= U'\u09B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09B6' && this->source.get()[startLocation__] <= U'\u09B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09CE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09DC' && this->source.get()[startLocation__] <= U'\u09DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09DF' && this->source.get()[startLocation__] <= U'\u09E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09F0' && this->source.get()[startLocation__] <= U'\u09F1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 129 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char3;
#line 22092 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0A05' && this->source.get()[startLocation__] <= U'\u0A0A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A0F' && this->source.get()[startLocation__] <= U'\u0A10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A13' && this->source.get()[startLocation__] <= U'\u0A28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A2A' && this->source.get()[startLocation__] <= U'\u0A30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A32' && this->source.get()[startLocation__] <= U'\u0A33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A35' && this->source.get()[startLocation__] <= U'\u0A36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A38' && this->source.get()[startLocation__] <= U'\u0A39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A59' && this->source.get()[startLocation__] <= U'\u0A5C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 130 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char4;
#line 22164 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A72' && this->source.get()[startLocation__] <= U'\u0A74')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A85' && this->source.get()[startLocation__] <= U'\u0A8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A8F' && this->source.get()[startLocation__] <= U'\u0A91')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A93' && this->source.get()[startLocation__] <= U'\u0AA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AAA' && this->source.get()[startLocation__] <= U'\u0AB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AB2' && this->source.get()[startLocation__] <= U'\u0AB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AB5' && this->source.get()[startLocation__] <= U'\u0AB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ABD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 131 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char5;
#line 22240 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0AD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AE0' && this->source.get()[startLocation__] <= U'\u0AE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0AF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B05' && this->source.get()[startLocation__] <= U'\u0B0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B0F' && this->source.get()[startLocation__] <= U'\u0B10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B13' && this->source.get()[startLocation__] <= U'\u0B28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B2A' && this->source.get()[startLocation__] <= U'\u0B30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B32' && this->source.get()[startLocation__] <= U'\u0B33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B35' && this->source.get()[startLocation__] <= U'\u0B39')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 132 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char6;
#line 22316 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0B3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B5C' && this->source.get()[startLocation__] <= U'\u0B5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B5F' && this->source.get()[startLocation__] <= U'\u0B61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B85' && this->source.get()[startLocation__] <= U'\u0B8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B8E' && this->source.get()[startLocation__] <= U'\u0B90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B92' && this->source.get()[startLocation__] <= U'\u0B95')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B99' && this->source.get()[startLocation__] <= U'\u0B9A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B9C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 133 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char7;
#line 22396 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0B9E' && this->source.get()[startLocation__] <= U'\u0B9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BA3' && this->source.get()[startLocation__] <= U'\u0BA4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BA8' && this->source.get()[startLocation__] <= U'\u0BAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BAE' && this->source.get()[startLocation__] <= U'\u0BB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BD0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C05' && this->source.get()[startLocation__] <= U'\u0C0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C0E' && this->source.get()[startLocation__] <= U'\u0C10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C12' && this->source.get()[startLocation__] <= U'\u0C28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C2A' && this->source.get()[startLocation__] <= U'\u0C39')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char8 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 134 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char8;
#line 22472 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0C3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C58' && this->source.get()[startLocation__] <= U'\u0C5A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C60' && this->source.get()[startLocation__] <= U'\u0C61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C85' && this->source.get()[startLocation__] <= U'\u0C8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C8E' && this->source.get()[startLocation__] <= U'\u0C90')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C92' && this->source.get()[startLocation__] <= U'\u0CA8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CAA' && this->source.get()[startLocation__] <= U'\u0CB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CB5' && this->source.get()[startLocation__] <= U'\u0CB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char9 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 135 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char9;
#line 22548 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0CDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE0' && this->source.get()[startLocation__] <= U'\u0CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CF1' && this->source.get()[startLocation__] <= U'\u0CF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D05' && this->source.get()[startLocation__] <= U'\u0D0C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D0E' && this->source.get()[startLocation__] <= U'\u0D10')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D12' && this->source.get()[startLocation__] <= U'\u0D3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D5F' && this->source.get()[startLocation__] <= U'\u0D61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D7A' && this->source.get()[startLocation__] <= U'\u0D7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char10 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 136 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char10;
#line 22628 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0D85' && this->source.get()[startLocation__] <= U'\u0D96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D9A' && this->source.get()[startLocation__] <= U'\u0DB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DB3' && this->source.get()[startLocation__] <= U'\u0DBB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DC0' && this->source.get()[startLocation__] <= U'\u0DC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E01' && this->source.get()[startLocation__] <= U'\u0E30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E32' && this->source.get()[startLocation__] <= U'\u0E33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E40' && this->source.get()[startLocation__] <= U'\u0E45')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E81' && this->source.get()[startLocation__] <= U'\u0E82')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char11 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 137 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char11;
#line 22704 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0E84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E87' && this->source.get()[startLocation__] <= U'\u0E88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E8A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E8D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E94' && this->source.get()[startLocation__] <= U'\u0E97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E99' && this->source.get()[startLocation__] <= U'\u0E9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EA1' && this->source.get()[startLocation__] <= U'\u0EA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EA7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EAA' && this->source.get()[startLocation__] <= U'\u0EAB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EAD' && this->source.get()[startLocation__] <= U'\u0EB0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char12 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 138 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char12;
#line 22788 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0EB2' && this->source.get()[startLocation__] <= U'\u0EB3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EBD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EC0' && this->source.get()[startLocation__] <= U'\u0EC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EDC' && this->source.get()[startLocation__] <= U'\u0EDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F40' && this->source.get()[startLocation__] <= U'\u0F47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F49' && this->source.get()[startLocation__] <= U'\u0F6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F88' && this->source.get()[startLocation__] <= U'\u0F8C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1000' && this->source.get()[startLocation__] <= U'\u102A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char13 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 139 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char13;
#line 22864 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u103F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1050' && this->source.get()[startLocation__] <= U'\u1055')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u105A' && this->source.get()[startLocation__] <= U'\u105D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1061')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1065' && this->source.get()[startLocation__] <= U'\u1066')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u106E' && this->source.get()[startLocation__] <= U'\u1070')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1075' && this->source.get()[startLocation__] <= U'\u1081')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10D0' && this->source.get()[startLocation__] <= U'\u10FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u10FD' && this->source.get()[startLocation__] <= U'\u1248')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char14 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 140 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char14;
#line 22944 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u124A' && this->source.get()[startLocation__] <= U'\u124D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1250' && this->source.get()[startLocation__] <= U'\u1256')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1258')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u125A' && this->source.get()[startLocation__] <= U'\u125D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1260' && this->source.get()[startLocation__] <= U'\u1288')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u128A' && this->source.get()[startLocation__] <= U'\u128D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1290' && this->source.get()[startLocation__] <= U'\u12B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12B2' && this->source.get()[startLocation__] <= U'\u12B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12B8' && this->source.get()[startLocation__] <= U'\u12BE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char15 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 141 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char15;
#line 23020 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u12C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12C2' && this->source.get()[startLocation__] <= U'\u12C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12C8' && this->source.get()[startLocation__] <= U'\u12D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u12D8' && this->source.get()[startLocation__] <= U'\u1310')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1312' && this->source.get()[startLocation__] <= U'\u1315')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1318' && this->source.get()[startLocation__] <= U'\u135A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1380' && this->source.get()[startLocation__] <= U'\u138F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1401' && this->source.get()[startLocation__] <= U'\u166C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u166F' && this->source.get()[startLocation__] <= U'\u167F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char16 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 142 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char16;
#line 23096 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1681' && this->source.get()[startLocation__] <= U'\u169A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u16A0' && this->source.get()[startLocation__] <= U'\u16EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u16F1' && this->source.get()[startLocation__] <= U'\u16F8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1700' && this->source.get()[startLocation__] <= U'\u170C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u170E' && this->source.get()[startLocation__] <= U'\u1711')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1720' && this->source.get()[startLocation__] <= U'\u1731')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1740' && this->source.get()[startLocation__] <= U'\u1751')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1760' && this->source.get()[startLocation__] <= U'\u176C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char17 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 143 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char17;
#line 23168 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u176E' && this->source.get()[startLocation__] <= U'\u1770')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1780' && this->source.get()[startLocation__] <= U'\u17B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1820' && this->source.get()[startLocation__] <= U'\u1842')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1844' && this->source.get()[startLocation__] <= U'\u1877')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1880' && this->source.get()[startLocation__] <= U'\u18A8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u18AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u18B0' && this->source.get()[startLocation__] <= U'\u18F5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1900' && this->source.get()[startLocation__] <= U'\u191E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char18 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 144 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char18;
#line 23244 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1950' && this->source.get()[startLocation__] <= U'\u196D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1970' && this->source.get()[startLocation__] <= U'\u1974')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1980' && this->source.get()[startLocation__] <= U'\u19AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u19B0' && this->source.get()[startLocation__] <= U'\u19C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A00' && this->source.get()[startLocation__] <= U'\u1A16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A20' && this->source.get()[startLocation__] <= U'\u1A54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B05' && this->source.get()[startLocation__] <= U'\u1B33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B45' && this->source.get()[startLocation__] <= U'\u1B4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char19 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 145 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char19;
#line 23316 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B83' && this->source.get()[startLocation__] <= U'\u1BA0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BAE' && this->source.get()[startLocation__] <= U'\u1BAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BBA' && this->source.get()[startLocation__] <= U'\u1BE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C00' && this->source.get()[startLocation__] <= U'\u1C23')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C4D' && this->source.get()[startLocation__] <= U'\u1C4F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C5A' && this->source.get()[startLocation__] <= U'\u1C77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CE9' && this->source.get()[startLocation__] <= U'\u1CEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CEE' && this->source.get()[startLocation__] <= U'\u1CF1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char20 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 146 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char20;
#line 23388 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1CF5' && this->source.get()[startLocation__] <= U'\u1CF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2135' && this->source.get()[startLocation__] <= U'\u2138')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D30' && this->source.get()[startLocation__] <= U'\u2D67')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2D80' && this->source.get()[startLocation__] <= U'\u2D96')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DA0' && this->source.get()[startLocation__] <= U'\u2DA6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DA8' && this->source.get()[startLocation__] <= U'\u2DAE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DB0' && this->source.get()[startLocation__] <= U'\u2DB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DB8' && this->source.get()[startLocation__] <= U'\u2DBE')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char21 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 147 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char21;
#line 23460 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2DC0' && this->source.get()[startLocation__] <= U'\u2DC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DC8' && this->source.get()[startLocation__] <= U'\u2DCE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DD0' && this->source.get()[startLocation__] <= U'\u2DD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2DD8' && this->source.get()[startLocation__] <= U'\u2DDE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3006')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u303C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3041' && this->source.get()[startLocation__] <= U'\u3096')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u309F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u30A1' && this->source.get()[startLocation__] <= U'\u30FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u30FF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char22 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 148 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char22;
#line 23540 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u3105' && this->source.get()[startLocation__] <= U'\u312D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3131' && this->source.get()[startLocation__] <= U'\u318E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u31A0' && this->source.get()[startLocation__] <= U'\u31BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u31F0' && this->source.get()[startLocation__] <= U'\u31FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3400' && this->source.get()[startLocation__] <= U'\u4DB5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u4E00' && this->source.get()[startLocation__] <= U'\u9FD5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA000' && this->source.get()[startLocation__] <= U'\uA014')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA016' && this->source.get()[startLocation__] <= U'\uA48C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char23 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 149 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char23;
#line 23612 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA4D0' && this->source.get()[startLocation__] <= U'\uA4F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA500' && this->source.get()[startLocation__] <= U'\uA60B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA610' && this->source.get()[startLocation__] <= U'\uA61F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA62A' && this->source.get()[startLocation__] <= U'\uA62B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA6A0' && this->source.get()[startLocation__] <= U'\uA6E5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA78F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA7F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA7FB' && this->source.get()[startLocation__] <= U'\uA801')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA803' && this->source.get()[startLocation__] <= U'\uA805')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char24 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 150 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char24;
#line 23692 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA807' && this->source.get()[startLocation__] <= U'\uA80A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA80C' && this->source.get()[startLocation__] <= U'\uA822')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA840' && this->source.get()[startLocation__] <= U'\uA873')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA882' && this->source.get()[startLocation__] <= U'\uA8B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8F2' && this->source.get()[startLocation__] <= U'\uA8F7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA90A' && this->source.get()[startLocation__] <= U'\uA925')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA930' && this->source.get()[startLocation__] <= U'\uA946')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char25 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 151 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char25;
#line 23768 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA960' && this->source.get()[startLocation__] <= U'\uA97C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA984' && this->source.get()[startLocation__] <= U'\uA9B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9E0' && this->source.get()[startLocation__] <= U'\uA9E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9E7' && this->source.get()[startLocation__] <= U'\uA9EF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9FA' && this->source.get()[startLocation__] <= U'\uA9FE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA00' && this->source.get()[startLocation__] <= U'\uAA28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA40' && this->source.get()[startLocation__] <= U'\uAA42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA44' && this->source.get()[startLocation__] <= U'\uAA4B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char26 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 152 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char26;
#line 23840 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA60' && this->source.get()[startLocation__] <= U'\uAA6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA71' && this->source.get()[startLocation__] <= U'\uAA76')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA7E' && this->source.get()[startLocation__] <= U'\uAAAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB5' && this->source.get()[startLocation__] <= U'\uAAB6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB9' && this->source.get()[startLocation__] <= U'\uAABD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAADB' && this->source.get()[startLocation__] <= U'\uAADC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char27 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 153 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char27;
#line 23920 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAAE0' && this->source.get()[startLocation__] <= U'\uAAEA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB01' && this->source.get()[startLocation__] <= U'\uAB06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB09' && this->source.get()[startLocation__] <= U'\uAB0E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB11' && this->source.get()[startLocation__] <= U'\uAB16')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB20' && this->source.get()[startLocation__] <= U'\uAB26')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAB28' && this->source.get()[startLocation__] <= U'\uAB2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABC0' && this->source.get()[startLocation__] <= U'\uABE2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAC00' && this->source.get()[startLocation__] <= U'\uD7A3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char28 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 154 "parser_imp.grammar"
                                                                                                                                                  returnValue__ = char28;
#line 23996 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uD7B0' && this->source.get()[startLocation__] <= U'\uD7C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uD7CB' && this->source.get()[startLocation__] <= U'\uD7FB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uF900' && this->source.get()[startLocation__] <= U'\uFA6D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFA70' && this->source.get()[startLocation__] <= U'\uFAD9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB1D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB1F' && this->source.get()[startLocation__] <= U'\uFB28')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB2A' && this->source.get()[startLocation__] <= U'\uFB36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB38' && this->source.get()[startLocation__] <= U'\uFB3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB3E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char29 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 155 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char29;
#line 24072 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFB40' && this->source.get()[startLocation__] <= U'\uFB41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB43' && this->source.get()[startLocation__] <= U'\uFB44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFB46' && this->source.get()[startLocation__] <= U'\uFBB1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFBD3' && this->source.get()[startLocation__] <= U'\uFD3D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD50' && this->source.get()[startLocation__] <= U'\uFD8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD92' && this->source.get()[startLocation__] <= U'\uFDC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFDF0' && this->source.get()[startLocation__] <= U'\uFDFB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE70' && this->source.get()[startLocation__] <= U'\uFE74')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char30 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 156 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char30;
#line 24144 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uFE76' && this->source.get()[startLocation__] <= U'\uFEFC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF66' && this->source.get()[startLocation__] <= U'\uFF6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF71' && this->source.get()[startLocation__] <= U'\uFF9D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFA0' && this->source.get()[startLocation__] <= U'\uFFBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFC2' && this->source.get()[startLocation__] <= U'\uFFC7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFCA' && this->source.get()[startLocation__] <= U'\uFFCF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFD2' && this->source.get()[startLocation__] <= U'\uFFD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFFDA' && this->source.get()[startLocation__] <= U'\uFFDC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char31 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 157 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char31;
#line 24216 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010000' && this->source.get()[startLocation__] <= U'\U0001000B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001000D' && this->source.get()[startLocation__] <= U'\U00010026')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010028' && this->source.get()[startLocation__] <= U'\U0001003A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001003C' && this->source.get()[startLocation__] <= U'\U0001003D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001003F' && this->source.get()[startLocation__] <= U'\U0001004D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char32 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010000-\\U0001000B\\U0001000D-\\U00010026\\U00010028-\\U0001003A\\U0001003C-\\U0001003D\\U0001003F-\\U0001004D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 158 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char32;
#line 24276 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010050' && this->source.get()[startLocation__] <= U'\U0001005D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010080' && this->source.get()[startLocation__] <= U'\U000100FA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010280' && this->source.get()[startLocation__] <= U'\U0001029C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000102A0' && this->source.get()[startLocation__] <= U'\U000102D0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010300' && this->source.get()[startLocation__] <= U'\U0001031F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char33 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010050-\\U0001005D\\U00010080-\\U000100FA\\U00010280-\\U0001029C\\U000102A0-\\U000102D0\\U00010300-\\U0001031F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 159 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char33;
#line 24336 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010330' && this->source.get()[startLocation__] <= U'\U00010340')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010342' && this->source.get()[startLocation__] <= U'\U00010349')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010350' && this->source.get()[startLocation__] <= U'\U00010375')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010380' && this->source.get()[startLocation__] <= U'\U0001039D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000103A0' && this->source.get()[startLocation__] <= U'\U000103C3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char34 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010330-\\U00010340\\U00010342-\\U00010349\\U00010350-\\U00010375\\U00010380-\\U0001039D\\U000103A0-\\U000103C3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 160 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char34;
#line 24396 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000103C8' && this->source.get()[startLocation__] <= U'\U000103CF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010450' && this->source.get()[startLocation__] <= U'\U0001049D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010500' && this->source.get()[startLocation__] <= U'\U00010527')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010530' && this->source.get()[startLocation__] <= U'\U00010563')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010600' && this->source.get()[startLocation__] <= U'\U00010736')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char35 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000103C8-\\U000103CF\\U00010450-\\U0001049D\\U00010500-\\U00010527\\U00010530-\\U00010563\\U00010600-\\U00010736]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 161 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char35;
#line 24456 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010740' && this->source.get()[startLocation__] <= U'\U00010755')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010760' && this->source.get()[startLocation__] <= U'\U00010767')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010800' && this->source.get()[startLocation__] <= U'\U00010805')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010808')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001080A' && this->source.get()[startLocation__] <= U'\U00010835')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010837' && this->source.get()[startLocation__] <= U'\U00010838')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char36 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010740-\\U00010755\\U00010760-\\U00010767\\U00010800-\\U00010805\\U00010808\\U0001080A-\\U00010835\\U00010837-\\U00010838]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 162 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char36;
#line 24520 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001083C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001083F' && this->source.get()[startLocation__] <= U'\U00010855')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010860' && this->source.get()[startLocation__] <= U'\U00010876')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010880' && this->source.get()[startLocation__] <= U'\U0001089E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000108E0' && this->source.get()[startLocation__] <= U'\U000108F2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000108F4' && this->source.get()[startLocation__] <= U'\U000108F5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char37 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001083C\\U0001083F-\\U00010855\\U00010860-\\U00010876\\U00010880-\\U0001089E\\U000108E0-\\U000108F2\\U000108F4-\\U000108F5]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 163 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char37;
#line 24584 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010900' && this->source.get()[startLocation__] <= U'\U00010915')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010920' && this->source.get()[startLocation__] <= U'\U00010939')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010980' && this->source.get()[startLocation__] <= U'\U000109B7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000109BE' && this->source.get()[startLocation__] <= U'\U000109BF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010A00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A10' && this->source.get()[startLocation__] <= U'\U00010A13')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char38 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010900-\\U00010915\\U00010920-\\U00010939\\U00010980-\\U000109B7\\U000109BE-\\U000109BF\\U00010A00\\U00010A10-\\U00010A13]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 164 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char38;
#line 24648 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010A15' && this->source.get()[startLocation__] <= U'\U00010A17')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A19' && this->source.get()[startLocation__] <= U'\U00010A33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A60' && this->source.get()[startLocation__] <= U'\U00010A7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A80' && this->source.get()[startLocation__] <= U'\U00010A9C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010AC0' && this->source.get()[startLocation__] <= U'\U00010AC7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char39 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010A15-\\U00010A17\\U00010A19-\\U00010A33\\U00010A60-\\U00010A7C\\U00010A80-\\U00010A9C\\U00010AC0-\\U00010AC7]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 165 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char39;
#line 24708 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010AC9' && this->source.get()[startLocation__] <= U'\U00010AE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B00' && this->source.get()[startLocation__] <= U'\U00010B35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B40' && this->source.get()[startLocation__] <= U'\U00010B55')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B60' && this->source.get()[startLocation__] <= U'\U00010B72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010B80' && this->source.get()[startLocation__] <= U'\U00010B91')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char40 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010AC9-\\U00010AE4\\U00010B00-\\U00010B35\\U00010B40-\\U00010B55\\U00010B60-\\U00010B72\\U00010B80-\\U00010B91]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 166 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char40;
#line 24768 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010C00' && this->source.get()[startLocation__] <= U'\U00010C48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011003' && this->source.get()[startLocation__] <= U'\U00011037')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011083' && this->source.get()[startLocation__] <= U'\U000110AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110D0' && this->source.get()[startLocation__] <= U'\U000110E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011103' && this->source.get()[startLocation__] <= U'\U00011126')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char41 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010C00-\\U00010C48\\U00011003-\\U00011037\\U00011083-\\U000110AF\\U000110D0-\\U000110E8\\U00011103-\\U00011126]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 167 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char41;
#line 24828 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011150' && this->source.get()[startLocation__] <= U'\U00011172')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011176')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011183' && this->source.get()[startLocation__] <= U'\U000111B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111C1' && this->source.get()[startLocation__] <= U'\U000111C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000111DA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000111DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011200' && this->source.get()[startLocation__] <= U'\U00011211')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char42 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011150-\\U00011172\\U00011176\\U00011183-\\U000111B2\\U000111C1-\\U000111C4\\U000111DA\\U000111DC\\U00011200-\\U00011211]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 168 "parser_imp.grammar"
                                                                                                                                                      returnValue__ = char42;
#line 24896 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011213' && this->source.get()[startLocation__] <= U'\U0001122B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011280' && this->source.get()[startLocation__] <= U'\U00011286')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011288')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001128A' && this->source.get()[startLocation__] <= U'\U0001128D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001128F' && this->source.get()[startLocation__] <= U'\U0001129D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001129F' && this->source.get()[startLocation__] <= U'\U000112A8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char43 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011213-\\U0001122B\\U00011280-\\U00011286\\U00011288\\U0001128A-\\U0001128D\\U0001128F-\\U0001129D\\U0001129F-\\U000112A8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 169 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char43;
#line 24960 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000112B0' && this->source.get()[startLocation__] <= U'\U000112DE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011305' && this->source.get()[startLocation__] <= U'\U0001130C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001130F' && this->source.get()[startLocation__] <= U'\U00011310')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011313' && this->source.get()[startLocation__] <= U'\U00011328')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001132A' && this->source.get()[startLocation__] <= U'\U00011330')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char44 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000112B0-\\U000112DE\\U00011305-\\U0001130C\\U0001130F-\\U00011310\\U00011313-\\U00011328\\U0001132A-\\U00011330]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 170 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char44;
#line 25020 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011332' && this->source.get()[startLocation__] <= U'\U00011333')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011335' && this->source.get()[startLocation__] <= U'\U00011339')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001133D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011350')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001135D' && this->source.get()[startLocation__] <= U'\U00011361')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011480' && this->source.get()[startLocation__] <= U'\U000114AF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char45 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011332-\\U00011333\\U00011335-\\U00011339\\U0001133D\\U00011350\\U0001135D-\\U00011361\\U00011480-\\U000114AF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 171 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char45;
#line 25084 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114C4' && this->source.get()[startLocation__] <= U'\U000114C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114C7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011580' && this->source.get()[startLocation__] <= U'\U000115AE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115D8' && this->source.get()[startLocation__] <= U'\U000115DB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011600' && this->source.get()[startLocation__] <= U'\U0001162F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011644')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char46 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114C4-\\U000114C5\\U000114C7\\U00011580-\\U000115AE\\U000115D8-\\U000115DB\\U00011600-\\U0001162F\\U00011644]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 172 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char46;
#line 25148 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011680' && this->source.get()[startLocation__] <= U'\U000116AA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011700' && this->source.get()[startLocation__] <= U'\U00011719')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000118FF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011AC0' && this->source.get()[startLocation__] <= U'\U00011AF8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012000' && this->source.get()[startLocation__] <= U'\U00012399')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012480' && this->source.get()[startLocation__] <= U'\U00012543')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char47 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011680-\\U000116AA\\U00011700-\\U00011719\\U000118FF\\U00011AC0-\\U00011AF8\\U00012000-\\U00012399\\U00012480-\\U00012543]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 173 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char47;
#line 25212 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00013000' && this->source.get()[startLocation__] <= U'\U0001342E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00014400' && this->source.get()[startLocation__] <= U'\U00014646')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016800' && this->source.get()[startLocation__] <= U'\U00016A38')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016A40' && this->source.get()[startLocation__] <= U'\U00016A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016AD0' && this->source.get()[startLocation__] <= U'\U00016AED')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char48 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00013000-\\U0001342E\\U00014400-\\U00014646\\U00016800-\\U00016A38\\U00016A40-\\U00016A5E\\U00016AD0-\\U00016AED]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 174 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char48;
#line 25272 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00016B00' && this->source.get()[startLocation__] <= U'\U00016B2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B63' && this->source.get()[startLocation__] <= U'\U00016B77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B7D' && this->source.get()[startLocation__] <= U'\U00016B8F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F00' && this->source.get()[startLocation__] <= U'\U00016F44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00016F50')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001B000' && this->source.get()[startLocation__] <= U'\U0001B001')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char49 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00016B00-\\U00016B2F\\U00016B63-\\U00016B77\\U00016B7D-\\U00016B8F\\U00016F00-\\U00016F44\\U00016F50\\U0001B000-\\U0001B001]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 175 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char49;
#line 25336 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001BC00' && this->source.get()[startLocation__] <= U'\U0001BC6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC70' && this->source.get()[startLocation__] <= U'\U0001BC7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC80' && this->source.get()[startLocation__] <= U'\U0001BC88')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC90' && this->source.get()[startLocation__] <= U'\U0001BC99')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001E800' && this->source.get()[startLocation__] <= U'\U0001E8C4')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char50 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001BC00-\\U0001BC6A\\U0001BC70-\\U0001BC7C\\U0001BC80-\\U0001BC88\\U0001BC90-\\U0001BC99\\U0001E800-\\U0001E8C4]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 176 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char50;
#line 25396 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE00' && this->source.get()[startLocation__] <= U'\U0001EE03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE05' && this->source.get()[startLocation__] <= U'\U0001EE1F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE21' && this->source.get()[startLocation__] <= U'\U0001EE22')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE24')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE27')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE29' && this->source.get()[startLocation__] <= U'\U0001EE32')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char51 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE00-\\U0001EE03\\U0001EE05-\\U0001EE1F\\U0001EE21-\\U0001EE22\\U0001EE24\\U0001EE27\\U0001EE29-\\U0001EE32]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 177 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char51;
#line 25460 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE34' && this->source.get()[startLocation__] <= U'\U0001EE37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE47')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE4B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE4D' && this->source.get()[startLocation__] <= U'\U0001EE4F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char52 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE34-\\U0001EE37\\U0001EE39\\U0001EE3B\\U0001EE42\\U0001EE47\\U0001EE49\\U0001EE4B\\U0001EE4D-\\U0001EE4F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 178 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char52;
#line 25532 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE51' && this->source.get()[startLocation__] <= U'\U0001EE52')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE54')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE5F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE61' && this->source.get()[startLocation__] <= U'\U0001EE62')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char53 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE51-\\U0001EE52\\U0001EE54\\U0001EE57\\U0001EE59\\U0001EE5B\\U0001EE5D\\U0001EE5F\\U0001EE61-\\U0001EE62]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 179 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char53;
#line 25604 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001EE64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE67' && this->source.get()[startLocation__] <= U'\U0001EE6A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE6C' && this->source.get()[startLocation__] <= U'\U0001EE72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE74' && this->source.get()[startLocation__] <= U'\U0001EE77')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE79' && this->source.get()[startLocation__] <= U'\U0001EE7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001EE7E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char54 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE64\\U0001EE67-\\U0001EE6A\\U0001EE6C-\\U0001EE72\\U0001EE74-\\U0001EE77\\U0001EE79-\\U0001EE7C\\U0001EE7E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 180 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char54;
#line 25668 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001EE80' && this->source.get()[startLocation__] <= U'\U0001EE89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EE8B' && this->source.get()[startLocation__] <= U'\U0001EE9B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEA1' && this->source.get()[startLocation__] <= U'\U0001EEA3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEA5' && this->source.get()[startLocation__] <= U'\U0001EEA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001EEAB' && this->source.get()[startLocation__] <= U'\U0001EEBB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char55 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001EE80-\\U0001EE89\\U0001EE8B-\\U0001EE9B\\U0001EEA1-\\U0001EEA3\\U0001EEA5-\\U0001EEA9\\U0001EEAB-\\U0001EEBB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 181 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char55;
#line 25728 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00020000' && this->source.get()[startLocation__] <= U'\U0002A6D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002A700' && this->source.get()[startLocation__] <= U'\U0002B734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002B740' && this->source.get()[startLocation__] <= U'\U0002B81D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002B820' && this->source.get()[startLocation__] <= U'\U0002CEA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0002F800' && this->source.get()[startLocation__] <= U'\U0002FA1D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char56 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00020000-\\U0002A6D6\\U0002A700-\\U0002B734\\U0002B740-\\U0002B81D\\U0002B820-\\U0002CEA1\\U0002F800-\\U0002FA1D]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 182 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char56;
#line 25788 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryNl()
{
    auto result = internalParseUnicodeCategoryNl(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryNl(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryNl(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryNl;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u16EE' && this->source.get()[startLocation__] <= U'\u16F0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2160' && this->source.get()[startLocation__] <= U'\u2182')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2185' && this->source.get()[startLocation__] <= U'\u2188')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u3007')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u3021' && this->source.get()[startLocation__] <= U'\u3029')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u3038' && this->source.get()[startLocation__] <= U'\u303A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uA6E6' && this->source.get()[startLocation__] <= U'\uA6EF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\U00010140' && this->source.get()[startLocation__] <= U'\U00010174')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF\\U00010140-\\U00010174]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U00010341')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001034A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000103D1' && this->source.get()[startLocation__] <= U'\U000103D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012400' && this->source.get()[startLocation__] <= U'\U0001246E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010341\\U0001034A\\U000103D1-\\U000103D5\\U00012400-\\U0001246E]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryNl(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryNl;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u16EE' && this->source.get()[startLocation__] <= U'\u16F0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2160' && this->source.get()[startLocation__] <= U'\u2182')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2185' && this->source.get()[startLocation__] <= U'\u2188')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u3007')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u3021' && this->source.get()[startLocation__] <= U'\u3029')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u3038' && this->source.get()[startLocation__] <= U'\u303A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uA6E6' && this->source.get()[startLocation__] <= U'\uA6EF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\U00010140' && this->source.get()[startLocation__] <= U'\U00010174')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF\\U00010140-\\U00010174]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 184 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char0;
#line 25991 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U00010341')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001034A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000103D1' && this->source.get()[startLocation__] <= U'\U000103D5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00012400' && this->source.get()[startLocation__] <= U'\U0001246E')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010341\\U0001034A\\U000103D1-\\U000103D5\\U00012400-\\U0001246E]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 185 "parser_imp.grammar"
                                                                                                 returnValue__ = char1;
#line 26039 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryMn()
{
    auto result = internalParseUnicodeCategoryMn(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryMn(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryMn(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryMn;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u0300' && this->source.get()[startLocation__] <= U'\u036F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0483' && this->source.get()[startLocation__] <= U'\u0487')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0591' && this->source.get()[startLocation__] <= U'\u05BD')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u05BF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05C1' && this->source.get()[startLocation__] <= U'\u05C2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05C4' && this->source.get()[startLocation__] <= U'\u05C5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u05C7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0610' && this->source.get()[startLocation__] <= U'\u061A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u064B' && this->source.get()[startLocation__] <= U'\u065F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0670')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06D6' && this->source.get()[startLocation__] <= U'\u06DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06DF' && this->source.get()[startLocation__] <= U'\u06E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06E7' && this->source.get()[startLocation__] <= U'\u06E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06EA' && this->source.get()[startLocation__] <= U'\u06ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0711')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0730' && this->source.get()[startLocation__] <= U'\u074A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07A6' && this->source.get()[startLocation__] <= U'\u07B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07EB' && this->source.get()[startLocation__] <= U'\u07F3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0816' && this->source.get()[startLocation__] <= U'\u0819')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u081B' && this->source.get()[startLocation__] <= U'\u0823')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0825' && this->source.get()[startLocation__] <= U'\u0827')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0829' && this->source.get()[startLocation__] <= U'\u082D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0859' && this->source.get()[startLocation__] <= U'\u085B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u08E3' && this->source.get()[startLocation__] <= U'\u0902')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0941' && this->source.get()[startLocation__] <= U'\u0948')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u094D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0951' && this->source.get()[startLocation__] <= U'\u0957')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0962' && this->source.get()[startLocation__] <= U'\u0963')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0981')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09C1' && this->source.get()[startLocation__] <= U'\u09C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09E2' && this->source.get()[startLocation__] <= U'\u09E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A01' && this->source.get()[startLocation__] <= U'\u0A02')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A41' && this->source.get()[startLocation__] <= U'\u0A42')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0A47' && this->source.get()[startLocation__] <= U'\u0A48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A4B' && this->source.get()[startLocation__] <= U'\u0A4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A51')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A70' && this->source.get()[startLocation__] <= U'\u0A71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A81' && this->source.get()[startLocation__] <= U'\u0A82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ABC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AC1' && this->source.get()[startLocation__] <= U'\u0AC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AC7' && this->source.get()[startLocation__] <= U'\u0AC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ACD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0AE2' && this->source.get()[startLocation__] <= U'\u0AE3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B41' && this->source.get()[startLocation__] <= U'\u0B44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B62' && this->source.get()[startLocation__] <= U'\u0B63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0C00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C3E' && this->source.get()[startLocation__] <= U'\u0C40')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0AE2-\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0C46' && this->source.get()[startLocation__] <= U'\u0C48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C4A' && this->source.get()[startLocation__] <= U'\u0C4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C55' && this->source.get()[startLocation__] <= U'\u0C56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C62' && this->source.get()[startLocation__] <= U'\u0C63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0C81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CCC' && this->source.get()[startLocation__] <= U'\u0CCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE2' && this->source.get()[startLocation__] <= U'\u0CE3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0D01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D41' && this->source.get()[startLocation__] <= U'\u0D44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D62' && this->source.get()[startLocation__] <= U'\u0D63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DCA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DD2' && this->source.get()[startLocation__] <= U'\u0DD4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E31')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E34' && this->source.get()[startLocation__] <= U'\u0E3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E47' && this->source.get()[startLocation__] <= U'\u0E4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EB1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0EB4' && this->source.get()[startLocation__] <= U'\u0EB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EBB' && this->source.get()[startLocation__] <= U'\u0EBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EC8' && this->source.get()[startLocation__] <= U'\u0ECD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F18' && this->source.get()[startLocation__] <= U'\u0F19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F71' && this->source.get()[startLocation__] <= U'\u0F7E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F80' && this->source.get()[startLocation__] <= U'\u0F84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F86' && this->source.get()[startLocation__] <= U'\u0F87')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0F8D' && this->source.get()[startLocation__] <= U'\u0F97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F99' && this->source.get()[startLocation__] <= U'\u0FBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0FC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u102D' && this->source.get()[startLocation__] <= U'\u1030')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1032' && this->source.get()[startLocation__] <= U'\u1037')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1039' && this->source.get()[startLocation__] <= U'\u103A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u103D' && this->source.get()[startLocation__] <= U'\u103E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1058' && this->source.get()[startLocation__] <= U'\u1059')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u105E' && this->source.get()[startLocation__] <= U'\u1060')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1071' && this->source.get()[startLocation__] <= U'\u1074')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1082')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1085' && this->source.get()[startLocation__] <= U'\u1086')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u109D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u135D' && this->source.get()[startLocation__] <= U'\u135F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1712' && this->source.get()[startLocation__] <= U'\u1714')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1732' && this->source.get()[startLocation__] <= U'\u1734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1752' && this->source.get()[startLocation__] <= U'\u1753')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1772' && this->source.get()[startLocation__] <= U'\u1773')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u17B4' && this->source.get()[startLocation__] <= U'\u17B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17B7' && this->source.get()[startLocation__] <= U'\u17BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17C9' && this->source.get()[startLocation__] <= U'\u17D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u180B' && this->source.get()[startLocation__] <= U'\u180D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u18A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1920' && this->source.get()[startLocation__] <= U'\u1922')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1927' && this->source.get()[startLocation__] <= U'\u1928')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1932')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1939' && this->source.get()[startLocation__] <= U'\u193B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A17' && this->source.get()[startLocation__] <= U'\u1A18')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A1B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A58' && this->source.get()[startLocation__] <= U'\u1A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A62')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A65' && this->source.get()[startLocation__] <= U'\u1A6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A73' && this->source.get()[startLocation__] <= U'\u1A7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1AB0' && this->source.get()[startLocation__] <= U'\u1ABD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B00' && this->source.get()[startLocation__] <= U'\u1B03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B36' && this->source.get()[startLocation__] <= U'\u1B3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B6B' && this->source.get()[startLocation__] <= U'\u1B73')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B80' && this->source.get()[startLocation__] <= U'\u1B81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA2' && this->source.get()[startLocation__] <= U'\u1BA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA8' && this->source.get()[startLocation__] <= U'\u1BA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BAB' && this->source.get()[startLocation__] <= U'\u1BAD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB-\\u1BAD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1BE6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BE8' && this->source.get()[startLocation__] <= U'\u1BE9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BEF' && this->source.get()[startLocation__] <= U'\u1BF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C2C' && this->source.get()[startLocation__] <= U'\u1C33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C36' && this->source.get()[startLocation__] <= U'\u1C37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CD0' && this->source.get()[startLocation__] <= U'\u1CD2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CD4' && this->source.get()[startLocation__] <= U'\u1CE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CE2' && this->source.get()[startLocation__] <= U'\u1CE8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1CED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1CF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CF8' && this->source.get()[startLocation__] <= U'\u1CF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1DC0' && this->source.get()[startLocation__] <= U'\u1DF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1DFC' && this->source.get()[startLocation__] <= U'\u1DFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u20D0' && this->source.get()[startLocation__] <= U'\u20DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u20E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u20E5' && this->source.get()[startLocation__] <= U'\u20F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2CEF' && this->source.get()[startLocation__] <= U'\u2CF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1CED\\u1CF4\\u1CF8-\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2DE0' && this->source.get()[startLocation__] <= U'\u2DFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u302A' && this->source.get()[startLocation__] <= U'\u302D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3099' && this->source.get()[startLocation__] <= U'\u309A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA674' && this->source.get()[startLocation__] <= U'\uA67D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA69E' && this->source.get()[startLocation__] <= U'\uA69F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA6F0' && this->source.get()[startLocation__] <= U'\uA6F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA802')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA806')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA80B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69E-\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA825' && this->source.get()[startLocation__] <= U'\uA826')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8E0' && this->source.get()[startLocation__] <= U'\uA8F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA926' && this->source.get()[startLocation__] <= U'\uA92D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA947' && this->source.get()[startLocation__] <= U'\uA951')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA980' && this->source.get()[startLocation__] <= U'\uA982')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9B6' && this->source.get()[startLocation__] <= U'\uA9B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9E5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA825-\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA29' && this->source.get()[startLocation__] <= U'\uAA2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA31' && this->source.get()[startLocation__] <= U'\uAA32')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA35' && this->source.get()[startLocation__] <= U'\uAA36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB2' && this->source.get()[startLocation__] <= U'\uAAB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB7' && this->source.get()[startLocation__] <= U'\uAAB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAABE' && this->source.get()[startLocation__] <= U'\uAABF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uAAC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAEC' && this->source.get()[startLocation__] <= U'\uAAED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABE8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB1E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE00' && this->source.get()[startLocation__] <= U'\uFE0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE20' && this->source.get()[startLocation__] <= U'\uFE2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000101FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000102E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010376' && this->source.get()[startLocation__] <= U'\U0001037A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\U000101FD\\U000102E0\\U00010376-\\U0001037A]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010A01' && this->source.get()[startLocation__] <= U'\U00010A03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A05' && this->source.get()[startLocation__] <= U'\U00010A06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A0C' && this->source.get()[startLocation__] <= U'\U00010A0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A38' && this->source.get()[startLocation__] <= U'\U00010A3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010A3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010AE5' && this->source.get()[startLocation__] <= U'\U00010AE6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010A01-\\U00010A03\\U00010A05-\\U00010A06\\U00010A0C-\\U00010A0F\\U00010A38-\\U00010A3A\\U00010A3F\\U00010AE5-\\U00010AE6]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U00011001')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011038' && this->source.get()[startLocation__] <= U'\U00011046')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001107F' && this->source.get()[startLocation__] <= U'\U00011081')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B3' && this->source.get()[startLocation__] <= U'\U000110B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B9' && this->source.get()[startLocation__] <= U'\U000110BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011100' && this->source.get()[startLocation__] <= U'\U00011102')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011001\\U00011038-\\U00011046\\U0001107F-\\U00011081\\U000110B3-\\U000110B6\\U000110B9-\\U000110BA\\U00011100-\\U00011102]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011127' && this->source.get()[startLocation__] <= U'\U0001112B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001112D' && this->source.get()[startLocation__] <= U'\U00011134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011173')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011180' && this->source.get()[startLocation__] <= U'\U00011181')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111B6' && this->source.get()[startLocation__] <= U'\U000111BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111CA' && this->source.get()[startLocation__] <= U'\U000111CC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011127-\\U0001112B\\U0001112D-\\U00011134\\U00011173\\U00011180-\\U00011181\\U000111B6-\\U000111BE\\U000111CA-\\U000111CC]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001122F' && this->source.get()[startLocation__] <= U'\U00011231')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011234')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011236' && this->source.get()[startLocation__] <= U'\U00011237')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000112DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112E3' && this->source.get()[startLocation__] <= U'\U000112EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011300' && this->source.get()[startLocation__] <= U'\U00011301')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001122F-\\U00011231\\U00011234\\U00011236-\\U00011237\\U000112DF\\U000112E3-\\U000112EA\\U00011300-\\U00011301]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001133C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011340')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011366' && this->source.get()[startLocation__] <= U'\U0001136C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011370' && this->source.get()[startLocation__] <= U'\U00011374')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114B3' && this->source.get()[startLocation__] <= U'\U000114B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114BF' && this->source.get()[startLocation__] <= U'\U000114C0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001133C\\U00011340\\U00011366-\\U0001136C\\U00011370-\\U00011374\\U000114B3-\\U000114B8\\U000114BA\\U000114BF-\\U000114C0]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114C2' && this->source.get()[startLocation__] <= U'\U000114C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115B2' && this->source.get()[startLocation__] <= U'\U000115B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115BC' && this->source.get()[startLocation__] <= U'\U000115BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115BF' && this->source.get()[startLocation__] <= U'\U000115C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115DC' && this->source.get()[startLocation__] <= U'\U000115DD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114C2-\\U000114C3\\U000115B2-\\U000115B5\\U000115BC-\\U000115BD\\U000115BF-\\U000115C0\\U000115DC-\\U000115DD]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011633' && this->source.get()[startLocation__] <= U'\U0001163A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001163D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001163F' && this->source.get()[startLocation__] <= U'\U00011640')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000116B0' && this->source.get()[startLocation__] <= U'\U000116B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116B7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011633-\\U0001163A\\U0001163D\\U0001163F-\\U00011640\\U000116AB\\U000116AD\\U000116B0-\\U000116B5\\U000116B7]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001171D' && this->source.get()[startLocation__] <= U'\U0001171F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011722' && this->source.get()[startLocation__] <= U'\U00011725')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011727' && this->source.get()[startLocation__] <= U'\U0001172B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016AF0' && this->source.get()[startLocation__] <= U'\U00016AF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B30' && this->source.get()[startLocation__] <= U'\U00016B36')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001171D-\\U0001171F\\U00011722-\\U00011725\\U00011727-\\U0001172B\\U00016AF0-\\U00016AF4\\U00016B30-\\U00016B36]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00016F8F' && this->source.get()[startLocation__] <= U'\U00016F92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC9D' && this->source.get()[startLocation__] <= U'\U0001BC9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D167' && this->source.get()[startLocation__] <= U'\U0001D169')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D17B' && this->source.get()[startLocation__] <= U'\U0001D182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D185' && this->source.get()[startLocation__] <= U'\U0001D18B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00016F8F-\\U00016F92\\U0001BC9D-\\U0001BC9E\\U0001D167-\\U0001D169\\U0001D17B-\\U0001D182\\U0001D185-\\U0001D18B]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D1AA' && this->source.get()[startLocation__] <= U'\U0001D1AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D242' && this->source.get()[startLocation__] <= U'\U0001D244')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DA00' && this->source.get()[startLocation__] <= U'\U0001DA36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DA3B' && this->source.get()[startLocation__] <= U'\U0001DA6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001DA75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001DA84')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D1AA-\\U0001D1AD\\U0001D242-\\U0001D244\\U0001DA00-\\U0001DA36\\U0001DA3B-\\U0001DA6C\\U0001DA75\\U0001DA84]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001DA9B' && this->source.get()[startLocation__] <= U'\U0001DA9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DAA1' && this->source.get()[startLocation__] <= U'\U0001DAAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001E8D0' && this->source.get()[startLocation__] <= U'\U0001E8D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000E0100' && this->source.get()[startLocation__] <= U'\U000E01EF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001DA9B-\\U0001DA9F\\U0001DAA1-\\U0001DAAF\\U0001E8D0-\\U0001E8D6\\U000E0100-\\U000E01EF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryMn(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryMn;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char8{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char9{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char10{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char11{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char12{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char13{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char14{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char15{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char16{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char17{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char18{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char19{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char20{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char21{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char22{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char23{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char24{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char25{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char26{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char27{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char28{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char29{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char30{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\u0300' && this->source.get()[startLocation__] <= U'\u036F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0483' && this->source.get()[startLocation__] <= U'\u0487')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0591' && this->source.get()[startLocation__] <= U'\u05BD')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u05BF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05C1' && this->source.get()[startLocation__] <= U'\u05C2')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u05C4' && this->source.get()[startLocation__] <= U'\u05C5')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u05C7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0610' && this->source.get()[startLocation__] <= U'\u061A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u064B' && this->source.get()[startLocation__] <= U'\u065F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 187 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char0;
#line 28306 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0670')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06D6' && this->source.get()[startLocation__] <= U'\u06DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06DF' && this->source.get()[startLocation__] <= U'\u06E4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06E7' && this->source.get()[startLocation__] <= U'\u06E8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u06EA' && this->source.get()[startLocation__] <= U'\u06ED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0711')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0730' && this->source.get()[startLocation__] <= U'\u074A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07A6' && this->source.get()[startLocation__] <= U'\u07B0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u07EB' && this->source.get()[startLocation__] <= U'\u07F3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 188 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char1;
#line 28374 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0816' && this->source.get()[startLocation__] <= U'\u0819')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u081B' && this->source.get()[startLocation__] <= U'\u0823')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0825' && this->source.get()[startLocation__] <= U'\u0827')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0829' && this->source.get()[startLocation__] <= U'\u082D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0859' && this->source.get()[startLocation__] <= U'\u085B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u08E3' && this->source.get()[startLocation__] <= U'\u0902')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u093C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0941' && this->source.get()[startLocation__] <= U'\u0948')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 189 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char2;
#line 28450 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u094D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0951' && this->source.get()[startLocation__] <= U'\u0957')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0962' && this->source.get()[startLocation__] <= U'\u0963')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0981')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09C1' && this->source.get()[startLocation__] <= U'\u09C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u09CD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u09E2' && this->source.get()[startLocation__] <= U'\u09E3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A01' && this->source.get()[startLocation__] <= U'\u0A02')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A41' && this->source.get()[startLocation__] <= U'\u0A42')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 190 "parser_imp.grammar"
                                                                                                                                               returnValue__ = char3;
#line 28534 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0A47' && this->source.get()[startLocation__] <= U'\u0A48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A4B' && this->source.get()[startLocation__] <= U'\u0A4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A51')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A70' && this->source.get()[startLocation__] <= U'\u0A71')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A81' && this->source.get()[startLocation__] <= U'\u0A82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ABC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AC1' && this->source.get()[startLocation__] <= U'\u0AC5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0AC7' && this->source.get()[startLocation__] <= U'\u0AC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0ACD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 191 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char4;
#line 28614 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0AE2' && this->source.get()[startLocation__] <= U'\u0AE3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B41' && this->source.get()[startLocation__] <= U'\u0B44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B62' && this->source.get()[startLocation__] <= U'\u0B63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0C00')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C3E' && this->source.get()[startLocation__] <= U'\u0C40')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0AE2-\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 192 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char5;
#line 28706 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0C46' && this->source.get()[startLocation__] <= U'\u0C48')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C4A' && this->source.get()[startLocation__] <= U'\u0C4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C55' && this->source.get()[startLocation__] <= U'\u0C56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C62' && this->source.get()[startLocation__] <= U'\u0C63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0C81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CCC' && this->source.get()[startLocation__] <= U'\u0CCD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE2' && this->source.get()[startLocation__] <= U'\u0CE3')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 193 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char6;
#line 28786 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u0D01')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D41' && this->source.get()[startLocation__] <= U'\u0D44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D62' && this->source.get()[startLocation__] <= U'\u0D63')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DCA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DD2' && this->source.get()[startLocation__] <= U'\u0DD4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0DD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0E31')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E34' && this->source.get()[startLocation__] <= U'\u0E3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E47' && this->source.get()[startLocation__] <= U'\u0E4E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0EB1')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 194 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char7;
#line 28870 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0EB4' && this->source.get()[startLocation__] <= U'\u0EB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EBB' && this->source.get()[startLocation__] <= U'\u0EBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0EC8' && this->source.get()[startLocation__] <= U'\u0ECD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F18' && this->source.get()[startLocation__] <= U'\u0F19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F39')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F71' && this->source.get()[startLocation__] <= U'\u0F7E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F80' && this->source.get()[startLocation__] <= U'\u0F84')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F86' && this->source.get()[startLocation__] <= U'\u0F87')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char8 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 195 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char8;
#line 28950 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0F8D' && this->source.get()[startLocation__] <= U'\u0F97')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F99' && this->source.get()[startLocation__] <= U'\u0FBC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0FC6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u102D' && this->source.get()[startLocation__] <= U'\u1030')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1032' && this->source.get()[startLocation__] <= U'\u1037')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1039' && this->source.get()[startLocation__] <= U'\u103A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u103D' && this->source.get()[startLocation__] <= U'\u103E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1058' && this->source.get()[startLocation__] <= U'\u1059')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u105E' && this->source.get()[startLocation__] <= U'\u1060')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char9 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 196 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char9;
#line 29026 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1071' && this->source.get()[startLocation__] <= U'\u1074')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1082')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1085' && this->source.get()[startLocation__] <= U'\u1086')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u109D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u135D' && this->source.get()[startLocation__] <= U'\u135F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1712' && this->source.get()[startLocation__] <= U'\u1714')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1732' && this->source.get()[startLocation__] <= U'\u1734')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1752' && this->source.get()[startLocation__] <= U'\u1753')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1772' && this->source.get()[startLocation__] <= U'\u1773')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char10 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 197 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char10;
#line 29106 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u17B4' && this->source.get()[startLocation__] <= U'\u17B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17B7' && this->source.get()[startLocation__] <= U'\u17BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17C6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17C9' && this->source.get()[startLocation__] <= U'\u17D3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u17DD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u180B' && this->source.get()[startLocation__] <= U'\u180D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u18A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1920' && this->source.get()[startLocation__] <= U'\u1922')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1927' && this->source.get()[startLocation__] <= U'\u1928')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1932')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char11 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 198 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char11;
#line 29186 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1939' && this->source.get()[startLocation__] <= U'\u193B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A17' && this->source.get()[startLocation__] <= U'\u1A18')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A1B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A56')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A58' && this->source.get()[startLocation__] <= U'\u1A5E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A60')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A62')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A65' && this->source.get()[startLocation__] <= U'\u1A6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A73' && this->source.get()[startLocation__] <= U'\u1A7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1AB0' && this->source.get()[startLocation__] <= U'\u1ABD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char12 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 199 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char12;
#line 29270 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B00' && this->source.get()[startLocation__] <= U'\u1B03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B36' && this->source.get()[startLocation__] <= U'\u1B3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B3C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B42')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B6B' && this->source.get()[startLocation__] <= U'\u1B73')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B80' && this->source.get()[startLocation__] <= U'\u1B81')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA2' && this->source.get()[startLocation__] <= U'\u1BA5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA8' && this->source.get()[startLocation__] <= U'\u1BA9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BAB' && this->source.get()[startLocation__] <= U'\u1BAD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char13 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB-\\u1BAD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 200 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char13;
#line 29350 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1BE6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BE8' && this->source.get()[startLocation__] <= U'\u1BE9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BEF' && this->source.get()[startLocation__] <= U'\u1BF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C2C' && this->source.get()[startLocation__] <= U'\u1C33')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C36' && this->source.get()[startLocation__] <= U'\u1C37')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CD0' && this->source.get()[startLocation__] <= U'\u1CD2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CD4' && this->source.get()[startLocation__] <= U'\u1CE0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CE2' && this->source.get()[startLocation__] <= U'\u1CE8')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char14 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 201 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char14;
#line 29426 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1CED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1CF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CF8' && this->source.get()[startLocation__] <= U'\u1CF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1DC0' && this->source.get()[startLocation__] <= U'\u1DF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1DFC' && this->source.get()[startLocation__] <= U'\u1DFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u20D0' && this->source.get()[startLocation__] <= U'\u20DC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u20E1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u20E5' && this->source.get()[startLocation__] <= U'\u20F0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2CEF' && this->source.get()[startLocation__] <= U'\u2CF1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u2D7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char15 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1CED\\u1CF4\\u1CF8-\\u1CF9\\u1DC0-\\u1DF5\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 202 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char15;
#line 29506 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2DE0' && this->source.get()[startLocation__] <= U'\u2DFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u302A' && this->source.get()[startLocation__] <= U'\u302D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3099' && this->source.get()[startLocation__] <= U'\u309A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA66F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA674' && this->source.get()[startLocation__] <= U'\uA67D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA69E' && this->source.get()[startLocation__] <= U'\uA69F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA6F0' && this->source.get()[startLocation__] <= U'\uA6F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA802')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA806')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA80B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char16 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69E-\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 203 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char16;
#line 29586 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA825' && this->source.get()[startLocation__] <= U'\uA826')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA8C4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8E0' && this->source.get()[startLocation__] <= U'\uA8F1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA926' && this->source.get()[startLocation__] <= U'\uA92D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA947' && this->source.get()[startLocation__] <= U'\uA951')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA980' && this->source.get()[startLocation__] <= U'\uA982')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9B3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9B6' && this->source.get()[startLocation__] <= U'\uA9B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9BC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA9E5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char17 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA825-\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 204 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char17;
#line 29666 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA29' && this->source.get()[startLocation__] <= U'\uAA2E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA31' && this->source.get()[startLocation__] <= U'\uAA32')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA35' && this->source.get()[startLocation__] <= U'\uAA36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA43')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAB0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB2' && this->source.get()[startLocation__] <= U'\uAAB4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAB7' && this->source.get()[startLocation__] <= U'\uAAB8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAABE' && this->source.get()[startLocation__] <= U'\uAABF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char18 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 205 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char18;
#line 29746 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uAAC1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAEC' && this->source.get()[startLocation__] <= U'\uAAED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABE5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABE8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uABED')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFB1E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE00' && this->source.get()[startLocation__] <= U'\uFE0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE20' && this->source.get()[startLocation__] <= U'\uFE2F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000101FD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000102E0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010376' && this->source.get()[startLocation__] <= U'\U0001037A')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char19 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\U000101FD\\U000102E0\\U00010376-\\U0001037A]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 206 "parser_imp.grammar"
                                                                                                                                                        returnValue__ = char19;
#line 29834 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00010A01' && this->source.get()[startLocation__] <= U'\U00010A03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A05' && this->source.get()[startLocation__] <= U'\U00010A06')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A0C' && this->source.get()[startLocation__] <= U'\U00010A0F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010A38' && this->source.get()[startLocation__] <= U'\U00010A3A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00010A3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00010AE5' && this->source.get()[startLocation__] <= U'\U00010AE6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char20 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00010A01-\\U00010A03\\U00010A05-\\U00010A06\\U00010A0C-\\U00010A0F\\U00010A38-\\U00010A3A\\U00010A3F\\U00010AE5-\\U00010AE6]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 207 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char20;
#line 29898 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U00011001')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011038' && this->source.get()[startLocation__] <= U'\U00011046')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001107F' && this->source.get()[startLocation__] <= U'\U00011081')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B3' && this->source.get()[startLocation__] <= U'\U000110B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B9' && this->source.get()[startLocation__] <= U'\U000110BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011100' && this->source.get()[startLocation__] <= U'\U00011102')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char21 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011001\\U00011038-\\U00011046\\U0001107F-\\U00011081\\U000110B3-\\U000110B6\\U000110B9-\\U000110BA\\U00011100-\\U00011102]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 208 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char21;
#line 29962 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011127' && this->source.get()[startLocation__] <= U'\U0001112B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001112D' && this->source.get()[startLocation__] <= U'\U00011134')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011173')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011180' && this->source.get()[startLocation__] <= U'\U00011181')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111B6' && this->source.get()[startLocation__] <= U'\U000111BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111CA' && this->source.get()[startLocation__] <= U'\U000111CC')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char22 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011127-\\U0001112B\\U0001112D-\\U00011134\\U00011173\\U00011180-\\U00011181\\U000111B6-\\U000111BE\\U000111CA-\\U000111CC]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 209 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char22;
#line 30026 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001122F' && this->source.get()[startLocation__] <= U'\U00011231')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011234')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011236' && this->source.get()[startLocation__] <= U'\U00011237')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000112DF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112E3' && this->source.get()[startLocation__] <= U'\U000112EA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011300' && this->source.get()[startLocation__] <= U'\U00011301')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char23 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001122F-\\U00011231\\U00011234\\U00011236-\\U00011237\\U000112DF\\U000112E3-\\U000112EA\\U00011300-\\U00011301]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 210 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char23;
#line 30090 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U0001133C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011340')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011366' && this->source.get()[startLocation__] <= U'\U0001136C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011370' && this->source.get()[startLocation__] <= U'\U00011374')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114B3' && this->source.get()[startLocation__] <= U'\U000114B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114BA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114BF' && this->source.get()[startLocation__] <= U'\U000114C0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char24 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001133C\\U00011340\\U00011366-\\U0001136C\\U00011370-\\U00011374\\U000114B3-\\U000114B8\\U000114BA\\U000114BF-\\U000114C0]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 211 "parser_imp.grammar"
                                                                                                                                                      returnValue__ = char24;
#line 30158 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114C2' && this->source.get()[startLocation__] <= U'\U000114C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115B2' && this->source.get()[startLocation__] <= U'\U000115B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115BC' && this->source.get()[startLocation__] <= U'\U000115BD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115BF' && this->source.get()[startLocation__] <= U'\U000115C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115DC' && this->source.get()[startLocation__] <= U'\U000115DD')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char25 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114C2-\\U000114C3\\U000115B2-\\U000115B5\\U000115BC-\\U000115BD\\U000115BF-\\U000115C0\\U000115DC-\\U000115DD]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 212 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char25;
#line 30218 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011633' && this->source.get()[startLocation__] <= U'\U0001163A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001163D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001163F' && this->source.get()[startLocation__] <= U'\U00011640')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000116B0' && this->source.get()[startLocation__] <= U'\U000116B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116B7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char26 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011633-\\U0001163A\\U0001163D\\U0001163F-\\U00011640\\U000116AB\\U000116AD\\U000116B0-\\U000116B5\\U000116B7]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 213 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char26;
#line 30286 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001171D' && this->source.get()[startLocation__] <= U'\U0001171F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011722' && this->source.get()[startLocation__] <= U'\U00011725')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011727' && this->source.get()[startLocation__] <= U'\U0001172B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016AF0' && this->source.get()[startLocation__] <= U'\U00016AF4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B30' && this->source.get()[startLocation__] <= U'\U00016B36')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char27 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001171D-\\U0001171F\\U00011722-\\U00011725\\U00011727-\\U0001172B\\U00016AF0-\\U00016AF4\\U00016B30-\\U00016B36]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 214 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char27;
#line 30346 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00016F8F' && this->source.get()[startLocation__] <= U'\U00016F92')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001BC9D' && this->source.get()[startLocation__] <= U'\U0001BC9E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D167' && this->source.get()[startLocation__] <= U'\U0001D169')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D17B' && this->source.get()[startLocation__] <= U'\U0001D182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D185' && this->source.get()[startLocation__] <= U'\U0001D18B')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char28 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00016F8F-\\U00016F92\\U0001BC9D-\\U0001BC9E\\U0001D167-\\U0001D169\\U0001D17B-\\U0001D182\\U0001D185-\\U0001D18B]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 215 "parser_imp.grammar"
                                                                                                                                             returnValue__ = char28;
#line 30406 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D1AA' && this->source.get()[startLocation__] <= U'\U0001D1AD')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D242' && this->source.get()[startLocation__] <= U'\U0001D244')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DA00' && this->source.get()[startLocation__] <= U'\U0001DA36')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DA3B' && this->source.get()[startLocation__] <= U'\U0001DA6C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001DA75')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001DA84')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char29 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D1AA-\\U0001D1AD\\U0001D242-\\U0001D244\\U0001DA00-\\U0001DA36\\U0001DA3B-\\U0001DA6C\\U0001DA75\\U0001DA84]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 216 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char29;
#line 30470 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001DA9B' && this->source.get()[startLocation__] <= U'\U0001DA9F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001DAA1' && this->source.get()[startLocation__] <= U'\U0001DAAF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001E8D0' && this->source.get()[startLocation__] <= U'\U0001E8D6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000E0100' && this->source.get()[startLocation__] <= U'\U000E01EF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char30 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001DA9B-\\U0001DA9F\\U0001DAA1-\\U0001DAAF\\U0001E8D0-\\U0001E8D6\\U000E0100-\\U000E01EF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 217 "parser_imp.grammar"
                                                                                                                        returnValue__ = char30;
#line 30526 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyPattern_Syntax()
{
    auto result = internalParseUnicodePropertyPattern_Syntax(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyPattern_Syntax(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyPattern_Syntax(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyPattern_Syntax;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'!' && this->source.get()[startLocation__] <= U'/')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U':' && this->source.get()[startLocation__] <= U'@')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'[' && this->source.get()[startLocation__] <= U'^')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'`')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'{' && this->source.get()[startLocation__] <= U'~')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00A1' && this->source.get()[startLocation__] <= U'\u00A7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00A9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00AB' && this->source.get()[startLocation__] <= U'\u00AC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00AE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00B0' && this->source.get()[startLocation__] <= U'\u00B1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00B6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00D7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00F7')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [!-/:-@[-\\^`{-~\\u00A1-\\u00A7\\u00A9\\u00AB-\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2010' && this->source.get()[startLocation__] <= U'\u2027')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2030' && this->source.get()[startLocation__] <= U'\u203E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2041' && this->source.get()[startLocation__] <= U'\u2053')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2055' && this->source.get()[startLocation__] <= U'\u205E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2190' && this->source.get()[startLocation__] <= U'\u245F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2500' && this->source.get()[startLocation__] <= U'\u2775')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2794' && this->source.get()[startLocation__] <= U'\u2BFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2E00' && this->source.get()[startLocation__] <= U'\u2E7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u3001' && this->source.get()[startLocation__] <= U'\u3003')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3008' && this->source.get()[startLocation__] <= U'\u3020')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3030')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD3E' && this->source.get()[startLocation__] <= U'\uFD3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE45' && this->source.get()[startLocation__] <= U'\uFE46')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E-\\uFD3F\\uFE45-\\uFE46]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyPattern_Syntax(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyPattern_Syntax;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'!' && this->source.get()[startLocation__] <= U'/')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U':' && this->source.get()[startLocation__] <= U'@')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'[' && this->source.get()[startLocation__] <= U'^')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'`')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'{' && this->source.get()[startLocation__] <= U'~')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00A1' && this->source.get()[startLocation__] <= U'\u00A7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00A9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00AB' && this->source.get()[startLocation__] <= U'\u00AC')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00AE')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u00B0' && this->source.get()[startLocation__] <= U'\u00B1')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00B6')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BB')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00BF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00D7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00F7')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [!-/:-@[-\\^`{-~\\u00A1-\\u00A7\\u00A9\\u00AB-\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 219 "parser_imp.grammar"
                                                                                                                                                      returnValue__ = char0;
#line 30857 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u2010' && this->source.get()[startLocation__] <= U'\u2027')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2030' && this->source.get()[startLocation__] <= U'\u203E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2041' && this->source.get()[startLocation__] <= U'\u2053')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2055' && this->source.get()[startLocation__] <= U'\u205E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2190' && this->source.get()[startLocation__] <= U'\u245F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2500' && this->source.get()[startLocation__] <= U'\u2775')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2794' && this->source.get()[startLocation__] <= U'\u2BFF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u2E00' && this->source.get()[startLocation__] <= U'\u2E7F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u2010-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u245F\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 220 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char1;
#line 30921 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u3001' && this->source.get()[startLocation__] <= U'\u3003')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u3008' && this->source.get()[startLocation__] <= U'\u3020')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u3030')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFD3E' && this->source.get()[startLocation__] <= U'\uFD3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFE45' && this->source.get()[startLocation__] <= U'\uFE46')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u3001-\\u3003\\u3008-\\u3020\\u3030\\uFD3E-\\uFD3F\\uFE45-\\uFE46]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 221 "parser_imp.grammar"
                                                                                                         returnValue__ = char2;
#line 30981 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryMc()
{
    auto result = internalParseUnicodeCategoryMc(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryMc(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryMc(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryMc;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u0903')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u093B')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u093E' && this->source.get()[startLocation__] <= U'\u0940')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0949' && this->source.get()[startLocation__] <= U'\u094C')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u094E' && this->source.get()[startLocation__] <= U'\u094F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0982' && this->source.get()[startLocation__] <= U'\u0983')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09BE' && this->source.get()[startLocation__] <= U'\u09C0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09C7' && this->source.get()[startLocation__] <= U'\u09C8')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09CB' && this->source.get()[startLocation__] <= U'\u09CC')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u09D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A3E' && this->source.get()[startLocation__] <= U'\u0A40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ABE' && this->source.get()[startLocation__] <= U'\u0AC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0AC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ACB' && this->source.get()[startLocation__] <= U'\u0ACC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B02' && this->source.get()[startLocation__] <= U'\u0B03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B47' && this->source.get()[startLocation__] <= U'\u0B48')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0B4B' && this->source.get()[startLocation__] <= U'\u0B4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BBE' && this->source.get()[startLocation__] <= U'\u0BBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BC1' && this->source.get()[startLocation__] <= U'\u0BC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BC6' && this->source.get()[startLocation__] <= U'\u0BC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BCA' && this->source.get()[startLocation__] <= U'\u0BCC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C01' && this->source.get()[startLocation__] <= U'\u0C03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C41' && this->source.get()[startLocation__] <= U'\u0C44')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0C82' && this->source.get()[startLocation__] <= U'\u0C83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CC0' && this->source.get()[startLocation__] <= U'\u0CC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CC7' && this->source.get()[startLocation__] <= U'\u0CC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CCA' && this->source.get()[startLocation__] <= U'\u0CCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CD5' && this->source.get()[startLocation__] <= U'\u0CD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D02' && this->source.get()[startLocation__] <= U'\u0D03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D3E' && this->source.get()[startLocation__] <= U'\u0D40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D46' && this->source.get()[startLocation__] <= U'\u0D48')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0D4A' && this->source.get()[startLocation__] <= U'\u0D4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D82' && this->source.get()[startLocation__] <= U'\u0D83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DCF' && this->source.get()[startLocation__] <= U'\u0DD1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DD8' && this->source.get()[startLocation__] <= U'\u0DDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DF2' && this->source.get()[startLocation__] <= U'\u0DF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F3E' && this->source.get()[startLocation__] <= U'\u0F3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u102B' && this->source.get()[startLocation__] <= U'\u102C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1031')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1038')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u103B' && this->source.get()[startLocation__] <= U'\u103C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1056' && this->source.get()[startLocation__] <= U'\u1057')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1062' && this->source.get()[startLocation__] <= U'\u1064')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1067' && this->source.get()[startLocation__] <= U'\u106D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1083' && this->source.get()[startLocation__] <= U'\u1084')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1087' && this->source.get()[startLocation__] <= U'\u108C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u109A' && this->source.get()[startLocation__] <= U'\u109C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u17B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17BE' && this->source.get()[startLocation__] <= U'\u17C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17C7' && this->source.get()[startLocation__] <= U'\u17C8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1923' && this->source.get()[startLocation__] <= U'\u1926')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1929' && this->source.get()[startLocation__] <= U'\u192B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1930' && this->source.get()[startLocation__] <= U'\u1931')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1933' && this->source.get()[startLocation__] <= U'\u1938')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A19' && this->source.get()[startLocation__] <= U'\u1A1A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A55')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1A57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A63' && this->source.get()[startLocation__] <= U'\u1A64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A6D' && this->source.get()[startLocation__] <= U'\u1A72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B04')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B3D' && this->source.get()[startLocation__] <= U'\u1B41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B43' && this->source.get()[startLocation__] <= U'\u1B44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA6' && this->source.get()[startLocation__] <= U'\u1BA7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1BAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BEA' && this->source.get()[startLocation__] <= U'\u1BEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BF2' && this->source.get()[startLocation__] <= U'\u1BF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C24' && this->source.get()[startLocation__] <= U'\u1C2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C34' && this->source.get()[startLocation__] <= U'\u1C35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CF2' && this->source.get()[startLocation__] <= U'\u1CF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u302E' && this->source.get()[startLocation__] <= U'\u302F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u302E-\\u302F]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA823' && this->source.get()[startLocation__] <= U'\uA824')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA827')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA880' && this->source.get()[startLocation__] <= U'\uA881')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8B4' && this->source.get()[startLocation__] <= U'\uA8C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA952' && this->source.get()[startLocation__] <= U'\uA953')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA983')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9B4' && this->source.get()[startLocation__] <= U'\uA9B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9BA' && this->source.get()[startLocation__] <= U'\uA9BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9BD' && this->source.get()[startLocation__] <= U'\uA9C0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA2F' && this->source.get()[startLocation__] <= U'\uAA30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA33' && this->source.get()[startLocation__] <= U'\uAA34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAEE' && this->source.get()[startLocation__] <= U'\uAAEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE3' && this->source.get()[startLocation__] <= U'\uABE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE6' && this->source.get()[startLocation__] <= U'\uABE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE9' && this->source.get()[startLocation__] <= U'\uABEA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uABEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011000')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011002')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011082')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B0' && this->source.get()[startLocation__] <= U'\U000110B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B7' && this->source.get()[startLocation__] <= U'\U000110B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001112C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111B3' && this->source.get()[startLocation__] <= U'\U000111B5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uABEC\\U00011000\\U00011002\\U00011082\\U000110B0-\\U000110B2\\U000110B7-\\U000110B8\\U0001112C\\U00011182\\U000111B3-\\U000111B5]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000111BF' && this->source.get()[startLocation__] <= U'\U000111C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001122C' && this->source.get()[startLocation__] <= U'\U0001122E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011232' && this->source.get()[startLocation__] <= U'\U00011233')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011235')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112E0' && this->source.get()[startLocation__] <= U'\U000112E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011302' && this->source.get()[startLocation__] <= U'\U00011303')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000111BF-\\U000111C0\\U0001122C-\\U0001122E\\U00011232-\\U00011233\\U00011235\\U000112E0-\\U000112E2\\U00011302-\\U00011303]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001133E' && this->source.get()[startLocation__] <= U'\U0001133F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011341' && this->source.get()[startLocation__] <= U'\U00011344')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011347' && this->source.get()[startLocation__] <= U'\U00011348')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001134B' && this->source.get()[startLocation__] <= U'\U0001134D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011357')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011362' && this->source.get()[startLocation__] <= U'\U00011363')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001133E-\\U0001133F\\U00011341-\\U00011344\\U00011347-\\U00011348\\U0001134B-\\U0001134D\\U00011357\\U00011362-\\U00011363]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114B0' && this->source.get()[startLocation__] <= U'\U000114B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114BB' && this->source.get()[startLocation__] <= U'\U000114BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114C1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115AF' && this->source.get()[startLocation__] <= U'\U000115B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115B8' && this->source.get()[startLocation__] <= U'\U000115BB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114B0-\\U000114B2\\U000114B9\\U000114BB-\\U000114BE\\U000114C1\\U000115AF-\\U000115B1\\U000115B8-\\U000115BB]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U000115BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011630' && this->source.get()[startLocation__] <= U'\U00011632')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001163B' && this->source.get()[startLocation__] <= U'\U0001163C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001163E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000116AE' && this->source.get()[startLocation__] <= U'\U000116AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116B6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000115BE\\U00011630-\\U00011632\\U0001163B-\\U0001163C\\U0001163E\\U000116AC\\U000116AE-\\U000116AF\\U000116B6]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011720' && this->source.get()[startLocation__] <= U'\U00011721')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011726')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F51' && this->source.get()[startLocation__] <= U'\U00016F7E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D165' && this->source.get()[startLocation__] <= U'\U0001D166')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D16D' && this->source.get()[startLocation__] <= U'\U0001D172')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011720-\\U00011721\\U00011726\\U00016F51-\\U00016F7E\\U0001D165-\\U0001D166\\U0001D16D-\\U0001D172]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryMc(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryMc;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char8{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char9{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char10{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char11{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char12{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char13{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char14{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char15{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char16{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u0903')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u093B')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u093E' && this->source.get()[startLocation__] <= U'\u0940')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0949' && this->source.get()[startLocation__] <= U'\u094C')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u094E' && this->source.get()[startLocation__] <= U'\u094F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0982' && this->source.get()[startLocation__] <= U'\u0983')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09BE' && this->source.get()[startLocation__] <= U'\u09C0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09C7' && this->source.get()[startLocation__] <= U'\u09C8')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09CB' && this->source.get()[startLocation__] <= U'\u09CC')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 223 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char0;
#line 32268 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u09D7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0A3E' && this->source.get()[startLocation__] <= U'\u0A40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0A83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ABE' && this->source.get()[startLocation__] <= U'\u0AC0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0AC9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ACB' && this->source.get()[startLocation__] <= U'\u0ACC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B02' && this->source.get()[startLocation__] <= U'\u0B03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B3E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0B47' && this->source.get()[startLocation__] <= U'\u0B48')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 224 "parser_imp.grammar"
                                                                                                                                        returnValue__ = char1;
#line 32344 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0B4B' && this->source.get()[startLocation__] <= U'\u0B4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0B57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BBE' && this->source.get()[startLocation__] <= U'\u0BBF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BC1' && this->source.get()[startLocation__] <= U'\u0BC2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BC6' && this->source.get()[startLocation__] <= U'\u0BC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0BCA' && this->source.get()[startLocation__] <= U'\u0BCC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0BD7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C01' && this->source.get()[startLocation__] <= U'\u0C03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C41' && this->source.get()[startLocation__] <= U'\u0C44')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 225 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char2;
#line 32420 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0C82' && this->source.get()[startLocation__] <= U'\u0C83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0CBE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CC0' && this->source.get()[startLocation__] <= U'\u0CC4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CC7' && this->source.get()[startLocation__] <= U'\u0CC8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CCA' && this->source.get()[startLocation__] <= U'\u0CCB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CD5' && this->source.get()[startLocation__] <= U'\u0CD6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D02' && this->source.get()[startLocation__] <= U'\u0D03')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D3E' && this->source.get()[startLocation__] <= U'\u0D40')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D46' && this->source.get()[startLocation__] <= U'\u0D48')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 226 "parser_imp.grammar"
                                                                                                                                                 returnValue__ = char3;
#line 32496 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0D4A' && this->source.get()[startLocation__] <= U'\u0D4C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0D57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D82' && this->source.get()[startLocation__] <= U'\u0D83')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DCF' && this->source.get()[startLocation__] <= U'\u0DD1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DD8' && this->source.get()[startLocation__] <= U'\u0DDF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DF2' && this->source.get()[startLocation__] <= U'\u0DF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F3E' && this->source.get()[startLocation__] <= U'\u0F3F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u0F7F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u102B' && this->source.get()[startLocation__] <= U'\u102C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 227 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char4;
#line 32572 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1031')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1038')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u103B' && this->source.get()[startLocation__] <= U'\u103C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1056' && this->source.get()[startLocation__] <= U'\u1057')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1062' && this->source.get()[startLocation__] <= U'\u1064')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1067' && this->source.get()[startLocation__] <= U'\u106D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1083' && this->source.get()[startLocation__] <= U'\u1084')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1087' && this->source.get()[startLocation__] <= U'\u108C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u108F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u109A' && this->source.get()[startLocation__] <= U'\u109C')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 228 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char5;
#line 32652 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u17B6')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17BE' && this->source.get()[startLocation__] <= U'\u17C5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17C7' && this->source.get()[startLocation__] <= U'\u17C8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1923' && this->source.get()[startLocation__] <= U'\u1926')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1929' && this->source.get()[startLocation__] <= U'\u192B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1930' && this->source.get()[startLocation__] <= U'\u1931')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1933' && this->source.get()[startLocation__] <= U'\u1938')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A19' && this->source.get()[startLocation__] <= U'\u1A1A')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A55')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 229 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char6;
#line 32728 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1A57')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1A61')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A63' && this->source.get()[startLocation__] <= U'\u1A64')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A6D' && this->source.get()[startLocation__] <= U'\u1A72')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B04')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B3B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B3D' && this->source.get()[startLocation__] <= U'\u1B41')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1B43' && this->source.get()[startLocation__] <= U'\u1B44')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1B82')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BA1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BA6' && this->source.get()[startLocation__] <= U'\u1BA7')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 230 "parser_imp.grammar"
                                                                                                                                              returnValue__ = char7;
#line 32816 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\u1BAA')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BEA' && this->source.get()[startLocation__] <= U'\u1BEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1BEE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BF2' && this->source.get()[startLocation__] <= U'\u1BF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C24' && this->source.get()[startLocation__] <= U'\u1C2B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C34' && this->source.get()[startLocation__] <= U'\u1C35')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u1CE1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1CF2' && this->source.get()[startLocation__] <= U'\u1CF3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u302E' && this->source.get()[startLocation__] <= U'\u302F')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char8 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u302E-\\u302F]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 231 "parser_imp.grammar"
                                                                                                                                         returnValue__ = char8;
#line 32896 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA823' && this->source.get()[startLocation__] <= U'\uA824')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA827')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA880' && this->source.get()[startLocation__] <= U'\uA881')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8B4' && this->source.get()[startLocation__] <= U'\uA8C3')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA952' && this->source.get()[startLocation__] <= U'\uA953')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uA983')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9B4' && this->source.get()[startLocation__] <= U'\uA9B5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9BA' && this->source.get()[startLocation__] <= U'\uA9BB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9BD' && this->source.get()[startLocation__] <= U'\uA9C0')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char9 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 232 "parser_imp.grammar"
                                                                                                                                          returnValue__ = char9;
#line 32972 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uAA2F' && this->source.get()[startLocation__] <= U'\uAA30')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA33' && this->source.get()[startLocation__] <= U'\uAA34')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA4D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7B')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAA7D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAEB')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAAEE' && this->source.get()[startLocation__] <= U'\uAAEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uAAF5')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE3' && this->source.get()[startLocation__] <= U'\uABE4')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE6' && this->source.get()[startLocation__] <= U'\uABE7')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABE9' && this->source.get()[startLocation__] <= U'\uABEA')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char10 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 233 "parser_imp.grammar"
                                                                                                                                                returnValue__ = char10;
#line 33056 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\uABEC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011000')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011002')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011082')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B0' && this->source.get()[startLocation__] <= U'\U000110B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110B7' && this->source.get()[startLocation__] <= U'\U000110B8')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001112C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011182')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111B3' && this->source.get()[startLocation__] <= U'\U000111B5')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char11 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uABEC\\U00011000\\U00011002\\U00011082\\U000110B0-\\U000110B2\\U000110B7-\\U000110B8\\U0001112C\\U00011182\\U000111B3-\\U000111B5]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 234 "parser_imp.grammar"
                                                                                                                                                           returnValue__ = char11;
#line 33132 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000111BF' && this->source.get()[startLocation__] <= U'\U000111C0')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001122C' && this->source.get()[startLocation__] <= U'\U0001122E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011232' && this->source.get()[startLocation__] <= U'\U00011233')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011235')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112E0' && this->source.get()[startLocation__] <= U'\U000112E2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011302' && this->source.get()[startLocation__] <= U'\U00011303')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char12 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000111BF-\\U000111C0\\U0001122C-\\U0001122E\\U00011232-\\U00011233\\U00011235\\U000112E0-\\U000112E2\\U00011302-\\U00011303]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 235 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char12;
#line 33196 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001133E' && this->source.get()[startLocation__] <= U'\U0001133F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011341' && this->source.get()[startLocation__] <= U'\U00011344')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011347' && this->source.get()[startLocation__] <= U'\U00011348')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001134B' && this->source.get()[startLocation__] <= U'\U0001134D')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011357')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011362' && this->source.get()[startLocation__] <= U'\U00011363')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char13 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001133E-\\U0001133F\\U00011341-\\U00011344\\U00011347-\\U00011348\\U0001134B-\\U0001134D\\U00011357\\U00011362-\\U00011363]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 236 "parser_imp.grammar"
                                                                                                                                                       returnValue__ = char13;
#line 33260 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000114B0' && this->source.get()[startLocation__] <= U'\U000114B2')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114B9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114BB' && this->source.get()[startLocation__] <= U'\U000114BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000114C1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115AF' && this->source.get()[startLocation__] <= U'\U000115B1')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000115B8' && this->source.get()[startLocation__] <= U'\U000115BB')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char14 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000114B0-\\U000114B2\\U000114B9\\U000114BB-\\U000114BE\\U000114C1\\U000115AF-\\U000115B1\\U000115B8-\\U000115BB]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 237 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char14;
#line 33324 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\U000115BE')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011630' && this->source.get()[startLocation__] <= U'\U00011632')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001163B' && this->source.get()[startLocation__] <= U'\U0001163C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U0001163E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116AC')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000116AE' && this->source.get()[startLocation__] <= U'\U000116AF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U000116B6')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char15 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000115BE\\U00011630-\\U00011632\\U0001163B-\\U0001163C\\U0001163E\\U000116AC\\U000116AE-\\U000116AF\\U000116B6]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 238 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char15;
#line 33392 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011720' && this->source.get()[startLocation__] <= U'\U00011721')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\U00011726')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016F51' && this->source.get()[startLocation__] <= U'\U00016F7E')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D165' && this->source.get()[startLocation__] <= U'\U0001D166')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U0001D16D' && this->source.get()[startLocation__] <= U'\U0001D172')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char16 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011720-\\U00011721\\U00011726\\U00016F51-\\U00016F7E\\U0001D165-\\U0001D166\\U0001D16D-\\U0001D172]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 239 "parser_imp.grammar"
                                                                                                                                  returnValue__ = char16;
#line 33452 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryNd()
{
    auto result = internalParseUnicodeCategoryNd(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryNd(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryNd(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryNd;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0660' && this->source.get()[startLocation__] <= U'\u0669')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u06F0' && this->source.get()[startLocation__] <= U'\u06F9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u07C0' && this->source.get()[startLocation__] <= U'\u07C9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0966' && this->source.get()[startLocation__] <= U'\u096F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09E6' && this->source.get()[startLocation__] <= U'\u09EF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0A66' && this->source.get()[startLocation__] <= U'\u0A6F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0AE6' && this->source.get()[startLocation__] <= U'\u0AEF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0B66' && this->source.get()[startLocation__] <= U'\u0B6F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0BE6' && this->source.get()[startLocation__] <= U'\u0BEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C66' && this->source.get()[startLocation__] <= U'\u0C6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE6' && this->source.get()[startLocation__] <= U'\u0CEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D66' && this->source.get()[startLocation__] <= U'\u0D6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DE6' && this->source.get()[startLocation__] <= U'\u0DEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E50' && this->source.get()[startLocation__] <= U'\u0E59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ED0' && this->source.get()[startLocation__] <= U'\u0ED9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F20' && this->source.get()[startLocation__] <= U'\u0F29')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1040' && this->source.get()[startLocation__] <= U'\u1049')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1090' && this->source.get()[startLocation__] <= U'\u1099')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17E0' && this->source.get()[startLocation__] <= U'\u17E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1810' && this->source.get()[startLocation__] <= U'\u1819')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1946' && this->source.get()[startLocation__] <= U'\u194F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u19D0' && this->source.get()[startLocation__] <= U'\u19D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A80' && this->source.get()[startLocation__] <= U'\u1A89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A90' && this->source.get()[startLocation__] <= U'\u1A99')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B50' && this->source.get()[startLocation__] <= U'\u1B59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BB0' && this->source.get()[startLocation__] <= U'\u1BB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C40' && this->source.get()[startLocation__] <= U'\u1C49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C50' && this->source.get()[startLocation__] <= U'\u1C59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA620' && this->source.get()[startLocation__] <= U'\uA629')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8D0' && this->source.get()[startLocation__] <= U'\uA8D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA900' && this->source.get()[startLocation__] <= U'\uA909')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9D0' && this->source.get()[startLocation__] <= U'\uA9D9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA9F0' && this->source.get()[startLocation__] <= U'\uA9F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA50' && this->source.get()[startLocation__] <= U'\uAA59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABF0' && this->source.get()[startLocation__] <= U'\uABF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF10' && this->source.get()[startLocation__] <= U'\uFF19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000104A0' && this->source.get()[startLocation__] <= U'\U000104A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011066' && this->source.get()[startLocation__] <= U'\U0001106F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110F0' && this->source.get()[startLocation__] <= U'\U000110F9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\\U000104A0-\\U000104A9\\U00011066-\\U0001106F\\U000110F0-\\U000110F9]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011136' && this->source.get()[startLocation__] <= U'\U0001113F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111D0' && this->source.get()[startLocation__] <= U'\U000111D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112F0' && this->source.get()[startLocation__] <= U'\U000112F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114D0' && this->source.get()[startLocation__] <= U'\U000114D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011650' && this->source.get()[startLocation__] <= U'\U00011659')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011136-\\U0001113F\\U000111D0-\\U000111D9\\U000112F0-\\U000112F9\\U000114D0-\\U000114D9\\U00011650-\\U00011659]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000116C0' && this->source.get()[startLocation__] <= U'\U000116C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011730' && this->source.get()[startLocation__] <= U'\U00011739')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118E0' && this->source.get()[startLocation__] <= U'\U000118E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016A60' && this->source.get()[startLocation__] <= U'\U00016A69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B50' && this->source.get()[startLocation__] <= U'\U00016B59')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000116C0-\\U000116C9\\U00011730-\\U00011739\\U000118E0-\\U000118E9\\U00016A60-\\U00016A69\\U00016B50-\\U00016B59]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D7CE' && this->source.get()[startLocation__] <= U'\U0001D7FF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D7CE-\\U0001D7FF]", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryNd(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryNd;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char7{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0660' && this->source.get()[startLocation__] <= U'\u0669')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u06F0' && this->source.get()[startLocation__] <= U'\u06F9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u07C0' && this->source.get()[startLocation__] <= U'\u07C9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0966' && this->source.get()[startLocation__] <= U'\u096F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u09E6' && this->source.get()[startLocation__] <= U'\u09EF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0A66' && this->source.get()[startLocation__] <= U'\u0A6F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0AE6' && this->source.get()[startLocation__] <= U'\u0AEF')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u0B66' && this->source.get()[startLocation__] <= U'\u0B6F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 241 "parser_imp.grammar"
                                                                                                                                              returnValue__ = char0;
#line 34031 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u0BE6' && this->source.get()[startLocation__] <= U'\u0BEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0C66' && this->source.get()[startLocation__] <= U'\u0C6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0CE6' && this->source.get()[startLocation__] <= U'\u0CEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0D66' && this->source.get()[startLocation__] <= U'\u0D6F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0DE6' && this->source.get()[startLocation__] <= U'\u0DEF')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0E50' && this->source.get()[startLocation__] <= U'\u0E59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0ED0' && this->source.get()[startLocation__] <= U'\u0ED9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u0F20' && this->source.get()[startLocation__] <= U'\u0F29')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 242 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char1;
#line 34095 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1040' && this->source.get()[startLocation__] <= U'\u1049')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1090' && this->source.get()[startLocation__] <= U'\u1099')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u17E0' && this->source.get()[startLocation__] <= U'\u17E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1810' && this->source.get()[startLocation__] <= U'\u1819')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1946' && this->source.get()[startLocation__] <= U'\u194F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u19D0' && this->source.get()[startLocation__] <= U'\u19D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A80' && this->source.get()[startLocation__] <= U'\u1A89')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1A90' && this->source.get()[startLocation__] <= U'\u1A99')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 243 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char2;
#line 34167 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\u1B50' && this->source.get()[startLocation__] <= U'\u1B59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1BB0' && this->source.get()[startLocation__] <= U'\u1BB9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C40' && this->source.get()[startLocation__] <= U'\u1C49')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\u1C50' && this->source.get()[startLocation__] <= U'\u1C59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA620' && this->source.get()[startLocation__] <= U'\uA629')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA8D0' && this->source.get()[startLocation__] <= U'\uA8D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA900' && this->source.get()[startLocation__] <= U'\uA909')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uA9D0' && this->source.get()[startLocation__] <= U'\uA9D9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 244 "parser_imp.grammar"
                                                                                                                                           returnValue__ = char3;
#line 34239 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\uA9F0' && this->source.get()[startLocation__] <= U'\uA9F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uAA50' && this->source.get()[startLocation__] <= U'\uAA59')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uABF0' && this->source.get()[startLocation__] <= U'\uABF9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\uFF10' && this->source.get()[startLocation__] <= U'\uFF19')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000104A0' && this->source.get()[startLocation__] <= U'\U000104A9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011066' && this->source.get()[startLocation__] <= U'\U0001106F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000110F0' && this->source.get()[startLocation__] <= U'\U000110F9')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char4 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\\U000104A0-\\U000104A9\\U00011066-\\U0001106F\\U000110F0-\\U000110F9]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 245 "parser_imp.grammar"
                                                                                                                                                      returnValue__ = char4;
#line 34307 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U00011136' && this->source.get()[startLocation__] <= U'\U0001113F')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000111D0' && this->source.get()[startLocation__] <= U'\U000111D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000112F0' && this->source.get()[startLocation__] <= U'\U000112F9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000114D0' && this->source.get()[startLocation__] <= U'\U000114D9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011650' && this->source.get()[startLocation__] <= U'\U00011659')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char5 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U00011136-\\U0001113F\\U000111D0-\\U000111D9\\U000112F0-\\U000112F9\\U000114D0-\\U000114D9\\U00011650-\\U00011659]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 246 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char5;
#line 34367 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U000116C0' && this->source.get()[startLocation__] <= U'\U000116C9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00011730' && this->source.get()[startLocation__] <= U'\U00011739')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U000118E0' && this->source.get()[startLocation__] <= U'\U000118E9')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016A60' && this->source.get()[startLocation__] <= U'\U00016A69')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] >= U'\U00016B50' && this->source.get()[startLocation__] <= U'\U00016B59')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char6 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U000116C0-\\U000116C9\\U00011730-\\U00011739\\U000118E0-\\U000118E9\\U00016A60-\\U00016A69\\U00016B50-\\U00016B59]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 247 "parser_imp.grammar"
                                                                                                                                            returnValue__ = char6;
#line 34427 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'\U0001D7CE' && this->source.get()[startLocation__] <= U'\U0001D7FF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char7 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\U0001D7CE-\\U0001D7FF]", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 248 "parser_imp.grammar"
                                                        returnValue__ = char7;
#line 34471 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryPc()
{
    auto result = internalParseUnicodeCategoryPc(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryPc(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryPc(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryPc;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'_')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u203F' && this->source.get()[startLocation__] <= U'\u2040')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2054')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uFE33' && this->source.get()[startLocation__] <= U'\uFE34')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uFE4D' && this->source.get()[startLocation__] <= U'\uFE4F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\uFF3F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [_\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryPc(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryPc;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'_')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u203F' && this->source.get()[startLocation__] <= U'\u2040')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2054')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uFE33' && this->source.get()[startLocation__] <= U'\uFE34')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\uFE4D' && this->source.get()[startLocation__] <= U'\uFE4F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\uFF3F')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [_\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 250 "parser_imp.grammar"
                                                                                       returnValue__ = char0;
#line 34606 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodeCategoryZs()
{
    auto result = internalParseUnicodeCategoryZs(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodeCategoryZs(0, result);
}

Parser::RuleResult Parser::internalParseUnicodeCategoryZs(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryZs;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U' ')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00A0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1680')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2000' && this->source.get()[startLocation__] <= U'\u200A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u202F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u205F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u3000')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [ \\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodeCategoryZs(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodeCategoryZs;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U' ')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u00A0')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u1680')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2000' && this->source.get()[startLocation__] <= U'\u200A')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u202F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u205F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u3000')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [ \\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 252 "parser_imp.grammar"
                                                                               returnValue__ = char0;
#line 34741 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyPattern_White_Space()
{
    auto result = internalParseUnicodePropertyPattern_White_Space(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyPattern_White_Space(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyPattern_White_Space(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyPattern_White_Space;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\t' && this->source.get()[startLocation__] <= U'\r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U' ')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0085')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u200E' && this->source.get()[startLocation__] <= U'\u200F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2028' && this->source.get()[startLocation__] <= U'\u2029')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\t-\\r \\u0085\\u200E-\\u200F\\u2028-\\u2029]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyPattern_White_Space(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyPattern_White_Space;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'\t' && this->source.get()[startLocation__] <= U'\r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U' ')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0085')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u200E' && this->source.get()[startLocation__] <= U'\u200F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u2028' && this->source.get()[startLocation__] <= U'\u2029')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\t-\\r \\u0085\\u200E-\\u200F\\u2028-\\u2029]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 254 "parser_imp.grammar"
                                                                                              returnValue__ = char0;
#line 34860 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyOther_ID_Start()
{
    auto result = internalParseUnicodePropertyOther_ID_Start(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyOther_ID_Start(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyOther_ID_Start(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyOther_ID_Start;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u2118')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u212E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u309B' && this->source.get()[startLocation__] <= U'\u309C')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing character with code 8472 (0x2118), character with code 8494 (0x212E), character with code 12443 (0x309B), or character with code 12444 (0x309C)", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyOther_ID_Start(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyOther_ID_Start;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u2118')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u212E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u309B' && this->source.get()[startLocation__] <= U'\u309C')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing character with code 8472 (0x2118), character with code 8494 (0x212E), character with code 12443 (0x309B), or character with code 12444 (0x309C)", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 256 "parser_imp.grammar"
                                                                        returnValue__ = char0;
#line 34963 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyOther_ID_Continue()
{
    auto result = internalParseUnicodePropertyOther_ID_Continue(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyOther_ID_Continue(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyOther_ID_Continue(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyOther_ID_Continue;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u00B7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0387')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1369' && this->source.get()[startLocation__] <= U'\u1371')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u19DA')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u00B7\\u0387\\u1369-\\u1371\\u19DA]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyOther_ID_Continue(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyOther_ID_Continue;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\u00B7')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u0387')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'\u1369' && this->source.get()[startLocation__] <= U'\u1371')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u19DA')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\u00B7\\u0387\\u1369-\\u1371\\u19DA]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 258 "parser_imp.grammar"
                                                                                 returnValue__ = char0;
#line 35074 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyIdStart()
{
    auto result = internalParseUnicodePropertyIdStart(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyIdStart(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyIdStart(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyIdStart;
    if(!ruleResult__.empty())
        return ruleResult__;
    isRequiredForSuccess__ = !isRequiredForSuccess__;
    ruleResult__ = this->internalParseUnicodePropertyPattern_Syntax(startLocation__, isRequiredForSuccess__);
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        ruleResult__ = this->internalParseUnicodePropertyPattern_White_Space(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    isRequiredForSuccess__ = !isRequiredForSuccess__;
    if(ruleResult__.success())
        ruleResult__ = this->makeFail(startLocation__, "not allowed here", isRequiredForSuccess__);
    else
        ruleResult__ = this->makeSuccess(startLocation__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->internalParseUnicodePropertyOther_ID_Start(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryLu(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryLl(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryLt(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryLm(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryLo(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryNl(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyIdStart(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyIdStart;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char6{};
    ruleResult__ = this->makeSuccess(startLocation__);
    this->internalEvaluateUnicodePropertyPattern_Syntax(startLocation__, ruleResult__);
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        this->internalEvaluateUnicodePropertyPattern_White_Space(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.success())
        ruleResult__ = this->makeFail(startLocation__, "not allowed here", false);
    else
        ruleResult__ = this->makeSuccess(startLocation__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        char0 = this->internalEvaluateUnicodePropertyOther_ID_Start(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 262 "parser_imp.grammar"
                                                 returnValue__ = char0;
#line 35294 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char1 = this->internalEvaluateUnicodeCategoryLu(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 263 "parser_imp.grammar"
                                       returnValue__ = char1;
#line 35310 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char2 = this->internalEvaluateUnicodeCategoryLl(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 264 "parser_imp.grammar"
                                       returnValue__ = char2;
#line 35334 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char3 = this->internalEvaluateUnicodeCategoryLt(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 265 "parser_imp.grammar"
                                       returnValue__ = char3;
#line 35358 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char4 = this->internalEvaluateUnicodeCategoryLm(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 266 "parser_imp.grammar"
                                       returnValue__ = char4;
#line 35382 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char5 = this->internalEvaluateUnicodeCategoryLo(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 267 "parser_imp.grammar"
                                       returnValue__ = char5;
#line 35406 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char6 = this->internalEvaluateUnicodeCategoryNl(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 268 "parser_imp.grammar"
                                       returnValue__ = char6;
#line 35430 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseUnicodePropertyIdContinue()
{
    auto result = internalParseUnicodePropertyIdContinue(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateUnicodePropertyIdContinue(0, result);
}

Parser::RuleResult Parser::internalParseUnicodePropertyIdContinue(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyIdContinue;
    if(!ruleResult__.empty())
        return ruleResult__;
    isRequiredForSuccess__ = !isRequiredForSuccess__;
    ruleResult__ = this->internalParseUnicodePropertyPattern_Syntax(startLocation__, isRequiredForSuccess__);
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        ruleResult__ = this->internalParseUnicodePropertyPattern_White_Space(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    isRequiredForSuccess__ = !isRequiredForSuccess__;
    if(ruleResult__.success())
        ruleResult__ = this->makeFail(startLocation__, "not allowed here", isRequiredForSuccess__);
    else
        ruleResult__ = this->makeSuccess(startLocation__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->internalParseUnicodePropertyIdStart(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodePropertyOther_ID_Continue(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryMn(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryMc(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryNd(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            ruleResult__ = this->internalParseUnicodeCategoryPc(startLocation__, isRequiredForSuccess__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateUnicodePropertyIdContinue(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultUnicodePropertyIdContinue;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char4{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char5{};
    ruleResult__ = this->makeSuccess(startLocation__);
    this->internalEvaluateUnicodePropertyPattern_Syntax(startLocation__, ruleResult__);
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        this->internalEvaluateUnicodePropertyPattern_White_Space(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.success())
        ruleResult__ = this->makeFail(startLocation__, "not allowed here", false);
    else
        ruleResult__ = this->makeSuccess(startLocation__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        char0 = this->internalEvaluateUnicodePropertyIdStart(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 273 "parser_imp.grammar"
                                          returnValue__ = char0;
#line 35639 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char1 = this->internalEvaluateUnicodePropertyOther_ID_Continue(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 274 "parser_imp.grammar"
                                                      returnValue__ = char1;
#line 35655 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char2 = this->internalEvaluateUnicodeCategoryMn(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 275 "parser_imp.grammar"
                                       returnValue__ = char2;
#line 35679 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char3 = this->internalEvaluateUnicodeCategoryMc(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 276 "parser_imp.grammar"
                                       returnValue__ = char3;
#line 35703 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char4 = this->internalEvaluateUnicodeCategoryNd(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 277 "parser_imp.grammar"
                                       returnValue__ = char4;
#line 35727 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        if(ruleResult__.fail())
        {
            Parser::RuleResult lastRuleResult__ = ruleResult__;
            char5 = this->internalEvaluateUnicodeCategoryPc(startLocation__, ruleResult__);
            if(ruleResult__.success())
            {
                auto savedStartLocation__ = startLocation__;
                startLocation__ = ruleResult__.location;
                {
#line 278 "parser_imp.grammar"
                                       returnValue__ = char5;
#line 35751 "parser_imp.cpp"
                }
                ruleResult__ = this->makeSuccess(startLocation__);
                startLocation__ = savedStartLocation__;
            }
            if(ruleResult__.success())
            {
                if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
                {
                    ruleResult__.endLocation = lastRuleResult__.endLocation;
                }
            }
        }
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptIdStart()
{
    auto result = internalParseECMAScriptIdStart(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptIdStart(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptIdStart(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptIdStart;
    if(!ruleResult__.empty())
        return ruleResult__;
    ruleResult__ = this->internalParseUnicodePropertyIdStart(startLocation__, isRequiredForSuccess__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        ruleResult__ = this->internalParseUnicodePropertyOther_ID_Start(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'$')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'_')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing $ or _", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptIdStart(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptIdStart;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char0 = this->internalEvaluateUnicodePropertyIdStart(startLocation__, ruleResult__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 281 "parser_imp.grammar"
                                                       returnValue__ = char0;
#line 35874 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        char1 = this->internalEvaluateUnicodePropertyOther_ID_Start(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 282 "parser_imp.grammar"
                                                    returnValue__ = char1;
#line 35890 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'$')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'_')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char2 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing $ or _", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 283 "parser_imp.grammar"
                           returnValue__ = char2;
#line 35938 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptIdContinue()
{
    auto result = internalParseECMAScriptIdContinue(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptIdContinue(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptIdContinue(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptIdContinue;
    if(!ruleResult__.empty())
        return ruleResult__;
    ruleResult__ = this->internalParseUnicodePropertyIdContinue(startLocation__, isRequiredForSuccess__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        ruleResult__ = this->internalParseUnicodePropertyOther_ID_Continue(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        ruleResult__ = this->internalParseUnicodePropertyOther_ID_Start(startLocation__, isRequiredForSuccess__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'$')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'_')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u200C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u200D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing $, _, character with code 8204 (0x200C), or character with code 8205 (0x200D)", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptIdContinue(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptIdContinue;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char2{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char3{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char0 = this->internalEvaluateUnicodePropertyIdContinue(startLocation__, ruleResult__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 285 "parser_imp.grammar"
                                                             returnValue__ = char0;
#line 36088 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        char1 = this->internalEvaluateUnicodePropertyOther_ID_Continue(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 286 "parser_imp.grammar"
                                                          returnValue__ = char1;
#line 36104 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        char2 = this->internalEvaluateUnicodePropertyOther_ID_Start(startLocation__, ruleResult__);
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 287 "parser_imp.grammar"
                                                       returnValue__ = char2;
#line 36128 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'$')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'_')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u200C')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\u200D')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char3 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing $, _, character with code 8204 (0x200C), or character with code 8205 (0x200D)", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 288 "parser_imp.grammar"
                                          returnValue__ = char3;
#line 36184 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptWhiteSpace()
{
    auto result = internalParseECMAScriptWhiteSpace(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptWhiteSpace(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptWhiteSpace(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptWhiteSpace;
    if(!ruleResult__.empty())
        return ruleResult__;
    ruleResult__ = this->internalParseUnicodeCategoryZs(startLocation__, isRequiredForSuccess__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\t')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\013')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\014')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFEFF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing tab (\\t), character with code 11 (0xB), character with code 12 (0xC), or character with code 65279 (0xFEFF)", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptWhiteSpace(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptWhiteSpace;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t char1{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char0 = this->internalEvaluateUnicodeCategoryZs(startLocation__, ruleResult__);
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 290 "parser_imp.grammar"
                                                     returnValue__ = char0;
#line 36292 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] == U'\t')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\013')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\014')
            {
                matches = true;
            }
            else if(this->source.get()[startLocation__] == U'\uFEFF')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                char1 = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing tab (\\t), character with code 11 (0xB), character with code 12 (0xC), or character with code 65279 (0xFEFF)", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 291 "parser_imp.grammar"
                                            returnValue__ = char1;
#line 36340 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptLineTerminator()
{
    auto result = internalParseECMAScriptLineTerminator(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptLineTerminator(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptLineTerminator(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptLineTerminator;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2028')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2029')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing end of line (\'\\n\'), end of line (\'\\r\'), character with code 8232 (0x2028), or character with code 8233 (0x2029)", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptLineTerminator(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptLineTerminator;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2028')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\u2029')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing end of line (\'\\n\'), end of line (\'\\r\'), character with code 8232 (0x2028), or character with code 8233 (0x2029)", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 293 "parser_imp.grammar"
                                                          returnValue__ = char0;
#line 36459 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptHexDigit()
{
    auto result = internalParseECMAScriptHexDigit(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptHexDigit(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptHexDigit(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptHexDigit;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'f')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing hexadecimal digit", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptHexDigit(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptHexDigit;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'F')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'f')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing hexadecimal digit", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 295 "parser_imp.grammar"
                                             returnValue__ = char0;
#line 36562 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptDecimalDigit()
{
    auto result = internalParseECMAScriptDecimalDigit(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptDecimalDigit(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptDecimalDigit(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptDecimalDigit;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing decimal digit", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptDecimalDigit(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptDecimalDigit;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing decimal digit", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 297 "parser_imp.grammar"
                                           returnValue__ = char0;
#line 36649 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptBinaryDigit()
{
    auto result = internalParseECMAScriptBinaryDigit(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptBinaryDigit(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptBinaryDigit(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptBinaryDigit;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'1')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing 0 or 1", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptBinaryDigit(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptBinaryDigit;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'1')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing 0 or 1", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 299 "parser_imp.grammar"
                                          returnValue__ = char0;
#line 36736 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptOctalDigit()
{
    auto result = internalParseECMAScriptOctalDigit(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptOctalDigit(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptOctalDigit(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptOctalDigit;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'7')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing octal digit", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptOctalDigit(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptOctalDigit;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'7')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing octal digit", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 301 "parser_imp.grammar"
                                         returnValue__ = char0;
#line 36823 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptNonZeroDigit()
{
    auto result = internalParseECMAScriptNonZeroDigit(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptNonZeroDigit(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptNonZeroDigit(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptNonZeroDigit;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'1' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [1-9]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptNonZeroDigit(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptNonZeroDigit;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'1' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [1-9]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 303 "parser_imp.grammar"
                                           returnValue__ = char0;
#line 36910 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptExponentIndicator()
{
    auto result = internalParseECMAScriptExponentIndicator(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptExponentIndicator(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptExponentIndicator(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptExponentIndicator;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'e')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing E or e", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptExponentIndicator(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptExponentIndicator;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'E')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'e')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing E or e", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 305 "parser_imp.grammar"
                                               returnValue__ = char0;
#line 37005 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

unsigned Parser::parseECMAScriptDigitValue()
{
    auto result = internalParseECMAScriptDigitValue(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptDigitValue(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptDigitValue(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptDigitValue;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing decimal digit", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'z')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing lowercase letter", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'Z')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing uppercase letter", isRequiredForSuccess__);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return ruleResult__;
}

unsigned Parser::internalEvaluateECMAScriptDigitValue(std::size_t startLocation__, RuleResult &ruleResult__)
{
    unsigned returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptDigitValue;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t digit{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t lower{};
    ruleResult__ = this->makeSuccess(startLocation__);
    char32_t upper{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            digit = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing decimal digit", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 307 "parser_imp.grammar"
                                             returnValue__ = digit - U'0';
#line 37172 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'a' && this->source.get()[startLocation__] <= U'z')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                lower = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing lowercase letter", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 308 "parser_imp.grammar"
                                             returnValue__ = lower - U'a' + 10;
#line 37208 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    if(ruleResult__.fail())
    {
        Parser::RuleResult lastRuleResult__ = ruleResult__;
        if(startLocation__ >= this->sourceSize)
        {
            ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
        }
        else
        {
            bool matches = false;
            if(this->source.get()[startLocation__] >= U'A' && this->source.get()[startLocation__] <= U'Z')
            {
                matches = true;
            }
            if(matches)
            {
                ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
                upper = this->source.get()[startLocation__];
            }
            else
            {
                ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing uppercase letter", false);
            }
        }
        if(ruleResult__.success())
        {
            auto savedStartLocation__ = startLocation__;
            startLocation__ = ruleResult__.location;
            {
#line 309 "parser_imp.grammar"
                                             returnValue__ = upper - U'A' + 10;
#line 37252 "parser_imp.cpp"
            }
            ruleResult__ = this->makeSuccess(startLocation__);
            startLocation__ = savedStartLocation__;
        }
        if(ruleResult__.success())
        {
            if(lastRuleResult__.endLocation >= ruleResult__.endLocation)
            {
                ruleResult__.endLocation = lastRuleResult__.endLocation;
            }
        }
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptSingleEscapeCharacter()
{
    auto result = internalParseECMAScriptSingleEscapeCharacter(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptSingleEscapeCharacter(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptSingleEscapeCharacter(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptSingleEscapeCharacter;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\\"\\\'\\\\bfnrtv]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptSingleEscapeCharacter(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptSingleEscapeCharacter;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\\"\\\'\\\\bfnrtv]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 312 "parser_imp.grammar"
                                                           returnValue__ = char0;
#line 37411 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptEscapeCharacter()
{
    auto result = internalParseECMAScriptEscapeCharacter(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptEscapeCharacter(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptEscapeCharacter(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptEscapeCharacter;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'u')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'x')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\\"\\\'0-9\\\\bfnrtuvx]", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptEscapeCharacter(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptEscapeCharacter;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'u')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'x')
        {
            matches = true;
        }
        if(matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "missing [\\\"\\\'0-9\\\\bfnrtuvx]", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 314 "parser_imp.grammar"
                                                          returnValue__ = char0;
#line 37586 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}

char32_t Parser::parseECMAScriptNonEscapeCharacter()
{
    auto result = internalParseECMAScriptNonEscapeCharacter(0, true);
    if(result.fail())
        throw ParseError(errorLocation, errorMessage);
    return internalEvaluateECMAScriptNonEscapeCharacter(0, result);
}

Parser::RuleResult Parser::internalParseECMAScriptNonEscapeCharacter(std::size_t startLocation__, bool isRequiredForSuccess__)
{
    auto &ruleResult__ = this->getResults(startLocation__).resultECMAScriptNonEscapeCharacter;
    if(!ruleResult__.empty())
        return ruleResult__;
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", isRequiredForSuccess__);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'u')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'x')
        {
            matches = true;
        }
        if(!matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "[\\\"\\\'0-9\\\\bfnrtuvx] not allowed here", isRequiredForSuccess__);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return ruleResult__;
}

char32_t Parser::internalEvaluateECMAScriptNonEscapeCharacter(std::size_t startLocation__, RuleResult &ruleResult__)
{
    char32_t returnValue__{};
    ruleResult__ = this->getResults(startLocation__).resultECMAScriptNonEscapeCharacter;
    if(ruleResult__.fail())
        return returnValue__;
    char32_t char0{};
    ruleResult__ = this->makeSuccess(startLocation__);
    if(startLocation__ >= this->sourceSize)
    {
        ruleResult__ = this->makeFail(startLocation__, "unexpected end of input", false);
    }
    else
    {
        bool matches = false;
        if(this->source.get()[startLocation__] == U'\"')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\'')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] >= U'0' && this->source.get()[startLocation__] <= U'9')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'\\')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'b')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'f')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'n')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'r')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U't')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'u')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'v')
        {
            matches = true;
        }
        else if(this->source.get()[startLocation__] == U'x')
        {
            matches = true;
        }
        if(!matches)
        {
            ruleResult__ = this->makeSuccess(startLocation__ + 1, startLocation__ + 1);
            char0 = this->source.get()[startLocation__];
        }
        else
        {
            ruleResult__ = this->makeFail(startLocation__, startLocation__ + 1, "[\\\"\\\'0-9\\\\bfnrtuvx] not allowed here", false);
        }
    }
    if(ruleResult__.success())
    {
        auto savedStartLocation__ = startLocation__;
        startLocation__ = ruleResult__.location;
        {
#line 316 "parser_imp.grammar"
                                                              returnValue__ = char0;
#line 37761 "parser_imp.cpp"
        }
        ruleResult__ = this->makeSuccess(startLocation__);
        startLocation__ = savedStartLocation__;
    }
    return returnValue__;
}
}
